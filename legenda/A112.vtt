WEBVTT

1
00:00:00.000 --> 00:00:07.820
[MÚSICA]

2
00:00:07.820 --> 00:00:13.356
[MÚSICA] E

3
00:00:13.356 --> 00:00:18.390
ai pessoal, tudo bem?

4
00:00:18.390 --> 00:00:23.760
Nessa aula iremos ver como utilizar uma
table view para apresentar informações.

5
00:00:23.760 --> 00:00:26.451
Como selecionamos uma célula dessa tabela,

6
00:00:26.451 --> 00:00:30.220
teremos uma chamada para uma
outra tela com mais informações.

7
00:00:30.220 --> 00:00:34.890
Vamos iniciar criando novo projeto
com a opção single view application.

8
00:00:34.890 --> 00:00:39.400
Escolha nome de projeto e
em Devices deixe Universal.

9
00:00:39.400 --> 00:00:43.400
Com o projeto criado, vamos ao storyboard.

10
00:00:43.400 --> 00:00:51.030
Adicione Navigation Controller
no view controller existente.

11
00:00:51.030 --> 00:00:58.720
Adicione novo view controller.

12
00:00:58.720 --> 00:01:04.477
[SEM_ÁUDIO] Agora

13
00:01:04.477 --> 00:01:09.260
crie segue do primeiro view
controller para o segundo,

14
00:01:09.260 --> 00:01:14.070
do tipo show.

15
00:01:14.070 --> 00:01:18.880
Coloque o identificador
show detail para esse segue

16
00:01:18.880 --> 00:01:22.950
No segundo view controller
adicione 3 labels.

17
00:01:22.950 --> 00:01:30.067
[SEM_ÁUDIO] A primeira

18
00:01:30.067 --> 00:01:34.460
vou modificar para informações,

19
00:01:34.460 --> 00:01:39.360
cor verde e o tamanho.

20
00:01:39.360 --> 00:01:44.890
A segunda vou modificar para nome,

21
00:01:44.890 --> 00:01:50.290
uma cor azul e também
colocar tamanho pouco menor.

22
00:01:50.290 --> 00:01:57.590
A terceira vou modificar para função,

23
00:01:57.590 --> 00:02:02.230
uma cor azul mais clara,
tamanho ainda menor.

24
00:02:02.230 --> 00:02:09.860
Agora vou voltar ao
primeiro view controller.

25
00:02:09.860 --> 00:02:17.365
Adicione uma table view.

26
00:02:17.365 --> 00:02:21.652
No inspetor de

27
00:02:21.652 --> 00:02:27.780
atributos temos diversos items
que podem ser modificados.

28
00:02:27.780 --> 00:02:30.490
Número de protótipos da
célula para a tabela,

29
00:02:30.490 --> 00:02:34.770
estilo da tabela que pode ser
simples ou por agrupamentos,

30
00:02:34.770 --> 00:02:39.130
tipo de separador,
modo de seleção de items da tabela,

31
00:02:39.130 --> 00:02:45.466
se é possível editar a tabela,
limite de linhas, forma de rolar os dados,

32
00:02:45.466 --> 00:02:50.144
caso seja maior que a tela do dispositivo,
e diversos outros.

33
00:02:50.144 --> 00:02:55.170
Nessa aula iremos apenas
adicionar protótipo da célula.

34
00:02:55.170 --> 00:03:03.080
Adicione constraints.

35
00:03:03.080 --> 00:03:10.092
[SEM_ÁUDIO] Selecione

36
00:03:10.092 --> 00:03:13.280
a célula criada.

37
00:03:13.280 --> 00:03:19.980
Coloque no identificador que vamos
chamar de Custom TableViewCell.

38
00:03:19.980 --> 00:03:24.720
Agora adicione uma label
dentro deste protótipo.

39
00:03:24.720 --> 00:03:31.160
Modifique para Nome.

40
00:03:31.160 --> 00:03:36.200
Como criamos protótipo de célula,
vamos criar código swift para ela.

41
00:03:36.200 --> 00:03:40.008
Adicione novo arquivo do
tipo Cocoa Touch Class,

42
00:03:40.008 --> 00:03:45.350
subclasse UITableViewCell,
chame de Custom TableViewCell.

43
00:03:45.350 --> 00:03:49.940
Volte ao storyboard e no inspetor
de identidade conecte a célula

44
00:03:49.940 --> 00:03:52.320
ao código que acabamos de criar.

45
00:03:52.320 --> 00:03:57.170
Com essa conexão feita podemos
ativar o assistant editor para criar

46
00:03:57.170 --> 00:04:00.317
outlet para label no
nome da célula ao código.

47
00:04:00.317 --> 00:04:05.550
Caso não esteja aparecendo código no
modo automático tem de salvar e reinicar

48
00:04:05.550 --> 00:04:10.390
o Xcode ou siga manualmente até ao
local que salvou o código no projeto.

49
00:04:10.390 --> 00:04:12.811
Chamar o outlet de Name Label.

50
00:04:12.811 --> 00:04:17.290
Agora vamos fazer uma
modificação no código existente.

51
00:04:17.290 --> 00:04:22.104
Adicione novo arquivo

52
00:04:22.104 --> 00:04:26.851
swift, selecione Cocoa Touch Class,

53
00:04:26.851 --> 00:04:33.364
subclasse UIViewController e
chame de TableViewController.

54
00:04:33.364 --> 00:04:35.890
Repita o procedimento.

55
00:04:35.890 --> 00:04:41.860
Chame a esse nome arquivo
de DetailViewController.

56
00:04:41.860 --> 00:04:47.385
Com os arquivos criados, vamos voltar

57
00:04:47.385 --> 00:04:51.590
ao storyboard e conecta-los a cada view
controller pelo inspetor de identidade.

58
00:04:51.590 --> 00:04:54.620
Primeiro o TableViewController.

59
00:04:54.620 --> 00:04:59.640
Agora o DetailViewController.

60
00:04:59.640 --> 00:05:05.030
Agore selecione a table view.

61
00:05:05.030 --> 00:05:09.953
Nos exemplos do outro módulo
fizemos as conexões de delegate e

62
00:05:09.953 --> 00:05:14.684
data source por código mas também
pode ser feita aqui pelo storyboard.

63
00:05:14.684 --> 00:05:16.830
Selecione o inspetor de conexões.

64
00:05:16.830 --> 00:05:21.695
Clique e arraste até ao view controller
o data source e faça o mesmo para

65
00:05:21.695 --> 00:05:22.610
o delegate.

66
00:05:22.610 --> 00:05:26.730
Vamos conectar ao código.

67
00:05:26.730 --> 00:05:31.530
Selecione o DetailViewController.

68
00:05:31.530 --> 00:05:35.620
Outlet para label de nome,

69
00:05:35.620 --> 00:05:39.625
Name Label.

70
00:05:39.625 --> 00:05:45.370
Outro para label de
função: Position Label.

71
00:05:45.370 --> 00:05:49.000
Vamos ao código.

72
00:05:49.000 --> 00:05:53.005
Primeiro o table view controller.

73
00:05:53.005 --> 00:06:00.210
Adicione UITableViewDataSource
e UITableViewDelegate.

74
00:06:00.210 --> 00:06:04.851
Vamos criar vetor de dados para a tabela.

75
00:06:04.851 --> 00:06:07.791
Pronto, temos vetor de
strings com os nomes

76
00:06:07.791 --> 00:06:12.040
dos introdutores desse programa integrado
de desenvolvimento iOS da Unicamp.

77
00:06:12.040 --> 00:06:17.003
Além disso adicione uma variável para
salvar a posição da tabela que vai ser

78
00:06:17.003 --> 00:06:18.040
selecionada.

79
00:06:18.040 --> 00:06:21.000
Agora vamos adicionar as
funções obrigatórias e

80
00:06:21.000 --> 00:06:23.750
auxiliares para trabalhar
com o table view.

81
00:06:23.750 --> 00:06:31.140
Nessa primeira função informamos que
tem apenas uma sessão na tabela.

82
00:06:31.140 --> 00:06:36.910
Na segunda precisamos informar o número de
dados a serem apresentados em cada sessão.

83
00:06:36.910 --> 00:06:41.511
Apenas temos uma e sabemos o número
pela quantidade de elementos no

84
00:06:41.511 --> 00:06:43.080
nosso vetor de dados.

85
00:06:43.080 --> 00:06:47.741
Nessa terceira função informamos o
que deve ser apresentado em cada

86
00:06:47.741 --> 00:06:49.140
posição da tabela.

87
00:06:49.140 --> 00:06:54.270
Para isso recuperamos a célula que
criamos a partir do identificador dela,

88
00:06:54.270 --> 00:06:59.430
além de utilizarmos a classe que
criamos para atualizar a label

89
00:06:59.430 --> 00:07:05.375
com o nome de instrutor
a partir do vetor de dados.

90
00:07:05.375 --> 00:07:11.320
Nessa função auxiliar sabemos quando
uma célula da tabela é selecionada.

91
00:07:11.320 --> 00:07:15.520
Quando ocorre essa seleção
podemos salvar a posição que foi

92
00:07:15.520 --> 00:07:19.704
selecionada e fazer segue por código
para apresentar os dados do instrutor

93
00:07:19.704 --> 00:07:21.750
selecionado em outro view controller.

94
00:07:21.750 --> 00:07:26.970
Antes de parte de navegação, vamos editar
o código do detail view controller.

95
00:07:26.970 --> 00:07:31.410
Aqui queremos apresentar dados que
não estão no outro view controller.

96
00:07:31.410 --> 00:07:34.550
Vamos criar também vetor
com esses dados adicionais.

97
00:07:34.550 --> 00:07:39.427
Além disso temos que ter várias variáveis
que recebam algumas informações do

98
00:07:39.427 --> 00:07:41.010
table view controller.

99
00:07:41.010 --> 00:07:45.979
Precisamos saber qual a posição da tabela
foi selecionada que vai ser o equivalente

100
00:07:45.979 --> 00:07:47.580
para o vetor de dados daqui.

101
00:07:47.580 --> 00:07:51.690
Também precisamos saber qual foi
o nome do instrutor selecionado.

102
00:07:51.690 --> 00:07:54.231
Se recebemos essas informações,

103
00:07:54.231 --> 00:07:58.180
podemos atualizar as labels
na função view did load.

104
00:07:58.180 --> 00:08:02.960
Agora podemos voltar à função de
navegação da table view controller.

105
00:08:02.960 --> 00:08:10.240
Aqui verificamos qual
segue será executado.

106
00:08:10.240 --> 00:08:14.544
O nosso exemplo tem apenas segue
a partir do table view controller que

107
00:08:14.544 --> 00:08:18.957
identificamos como show detail mas
é uma boa prática sempre verificar

108
00:08:18.957 --> 00:08:21.360
o identificador antes de codificar.

109
00:08:21.360 --> 00:08:26.138
Como sabemos qual é o view controller
que será chamado a partir desse segue,

110
00:08:26.138 --> 00:08:29.861
podemos especificar que é
o DetailViewController.

111
00:08:29.861 --> 00:08:34.635
Com isso é possível ver as
variáveis que colocamos e atualizar

112
00:08:34.635 --> 00:08:37.865
ambas com os dados que precisamos.

113
00:08:37.865 --> 00:08:42.170
Depois de todos esses passos, podemos
finalmente executar o nosso aplicativo.

114
00:08:42.170 --> 00:08:50.170
[SEM_ÁUDIO]

115
00:08:50.170 --> 00:08:56.731
Para iPhone os nomes estão cortados

116
00:08:56.731 --> 00:09:00.430
e a segunda tela está parcialmente
visivel pois não adicionamos constraints.

117
00:09:00.430 --> 00:09:08.430
Vamos parar e executar em iPad.

118
00:09:08.430 --> 00:09:18.039
[SEM_ÁUDIO] Agora está

119
00:09:18.039 --> 00:09:23.970
tudo funcionando corretamente.

120
00:09:23.970 --> 00:09:28.969
Na próxima aula você vai ver
como utilizar collection view.

121
00:09:28.969 --> 00:09:29.660
Até lá!
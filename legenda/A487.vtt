WEBVTT

1
00:00:00.000 --> 00:00:07.570
[MÚSICA]

2
00:00:07.570 --> 00:00:11.935
[MÚSICA] Meu nome é Eduardo Guerra.

3
00:00:11.935 --> 00:00:16.300
Esse é o Curso de Programação Orientada
a Objetos com Java.

4
00:00:16.300 --> 00:00:18.798
Hoje vamos falar sobre herança.

5
00:00:18.798 --> 00:00:23.541
O objetivo dessa aula é que você saia
entendendo o que é herança e como

6
00:00:23.541 --> 00:00:26.670
utilizar ela na modelagem
orientada a objetos.

7
00:00:26.670 --> 00:00:32.455
Adicionalmente vamos ver também como
implementar essa herança aí Java.

8
00:00:32.455 --> 00:00:37.822
A gente viu no final da outra aula,
a questão dos níveis de abstração e vimos

9
00:00:37.822 --> 00:00:42.835
que a partir da herança,
a gente consegue estar

10
00:00:42.835 --> 00:00:48.012
estendendo conceito de uma classe
para tornar ele mais específico.

11
00:00:48.012 --> 00:00:53.095
Então, quando isso acontece,
a gente chama a classe a qual está

12
00:00:53.095 --> 00:01:00.515
sendo estendida de superclasse e a classe
que está estendendo de subclasse,

13
00:01:00.515 --> 00:01:05.905
então no nosso exemplo,
o empregado que seria a classe base,

14
00:01:05.905 --> 00:01:10.814
ele seria a superclasse,
e o gerente que seria a classe que

15
00:01:10.814 --> 00:01:15.716
está especializando seria a subclasse,
como é que a gente faz isso?

16
00:01:15.716 --> 00:01:20.097
Por exemplo,
Java eu simplesmente uso o extends,

17
00:01:20.097 --> 00:01:24.420
então eu coloco que
gerente extends empregado,

18
00:01:24.420 --> 00:01:32.000
e a partir dali ele vai herdar todos os
métodos e atributos da classe de cima.

19
00:01:32.000 --> 00:01:37.040
Note que eu posso por exemplo,
adicionar, então no momento que eu faço

20
00:01:37.040 --> 00:01:42.226
gerente extends empregado,
ele vai herdar ali todos aquele atributos

21
00:01:42.226 --> 00:01:47.300
e aí eu ainda posso acrescentar o
bônus que é específico do gerente.

22
00:01:47.300 --> 00:01:49.525
Quando eu faço a herança,

23
00:01:49.525 --> 00:01:55.300
têm coisas que pode e têm coisas que
não pode, então o que é que pode?

24
00:01:55.300 --> 00:01:57.323
Eu posso estar adicionando métodos,

25
00:01:57.323 --> 00:02:01.392
eu posso estar adicionando atributos
e eu posso estar modificando métodos.

26
00:02:01.392 --> 00:02:05.776
Essa questão da modificação de métodos a
gente vai ver com mais detalhes numa aula

27
00:02:05.776 --> 00:02:06.865
para frente.

28
00:02:06.865 --> 00:02:08.859
Agora o que é que não pode?

29
00:02:08.859 --> 00:02:14.545
Eu não posso remover nada, então aquilo
que a classe, que a superclasse falou

30
00:02:14.545 --> 00:02:19.848
que tem termos de métodos e atributos,
eu não posso tirar, eu não posso remover.

31
00:02:19.848 --> 00:02:24.379
E outra coisa que eu não posso fazer,
é estender uma outra classe,

32
00:02:24.379 --> 00:02:27.366
Java eu só posso estender
uma classe por vez,

33
00:02:27.366 --> 00:02:31.207
a gente também nessa aula vai ver
isso pouquinho mais pra frente.

34
00:02:31.207 --> 00:02:33.387
Agora porque é que eu não posso remover?

35
00:02:33.387 --> 00:02:38.081
Quando uma classe ela chega e fala:
"olha eu tenho esse método e eu

36
00:02:38.081 --> 00:02:42.330
tenho esse atributo e
você pode acessar ele",

37
00:02:42.330 --> 00:02:47.239
é como se ela tivesse criando contrato,

38
00:02:47.239 --> 00:02:53.189
que ela se compromete a prover aquelas
informações e aquela funcionalidade.

39
00:02:53.189 --> 00:02:57.358
Se você for
lá e remover método na subclasse,

40
00:02:57.358 --> 00:03:01.553
é como se você tivesse
rescindido aquele contrato.

41
00:03:01.553 --> 00:03:06.526
Ou seja, por exemplo, empregado ele
vai lá e fala o seguinte: "olha

42
00:03:06.526 --> 00:03:11.380
a partir de mim você consegue obter
o meu salário, a partir de método".

43
00:03:11.380 --> 00:03:16.545
e o gerente, ele tem que continuar,
como ele é empregado,

44
00:03:16.545 --> 00:03:21.211
como ele está estendendo esse conceito,
ele pode acrescentar coisas novas,

45
00:03:21.211 --> 00:03:25.526
ele pode acrescentar métodos,
ele pode até pegar método que existe e

46
00:03:25.526 --> 00:03:29.710
implementar ele de uma forma diferente,
ter uma lógica diferente.

47
00:03:29.710 --> 00:03:34.766
Mas ele não pode, de forma nenhuma,
quebrar aquele contrato da superclasse.

48
00:03:34.766 --> 00:03:39.076
Isso na modelagem orientada
a objetos é extremamente importante,

49
00:03:39.076 --> 00:03:43.399
a subclasse, ela tem que manter
os contratos da superclasse,

50
00:03:43.399 --> 00:03:47.720
então se a superclasse fala que
pode prover uma informação,

51
00:03:47.720 --> 00:03:52.734
a subclasse tem que continuar
provendo aquela informação.

52
00:03:52.734 --> 00:03:58.466
Se a superclasse diz que vai fornecer
uma funcionalidade a partir de método,

53
00:03:58.466 --> 00:04:02.810
a subclasse tem que continuar
provendo aquela funcionalidade,

54
00:04:02.810 --> 00:04:07.311
pode ser até de uma forma diferente,
mas ela não pode quebrar o contrato.

55
00:04:07.311 --> 00:04:10.093
Outra coisa se a gente for
pensar por exemplo,

56
00:04:10.093 --> 00:04:14.807
esse seria o exemplo clássico do que
a gente chama aí de herança múltipla,

57
00:04:14.807 --> 00:04:20.876
se eu tenho sofá cama, ele herdaria
conceitos tanto de cama, quanto de sofá.

58
00:04:20.876 --> 00:04:25.979
Então a gente pode falar assim, não,
no caso ali eu tinha empregado,

59
00:04:25.979 --> 00:04:31.460
e tenho gerente que é empregado mais
específico, eu posso falar que o sofá cama

60
00:04:31.460 --> 00:04:36.245
é sofá mais específico, ou posso falar que
o sofá cama, é uma cama mais específica,

61
00:04:36.245 --> 00:04:43.062
eu posso falar que sofá cama, é ao mesmo
tempo, sofá e uma cama mais específica.

62
00:04:43.062 --> 00:04:47.150
Só que, Java,
essa ideia da herança múltipla,

63
00:04:47.150 --> 00:04:49.207
ela não é permitida na linguagem.

64
00:04:49.207 --> 00:04:52.218
Então essa também é uma coisa
que a gente tem que lembrar,

65
00:04:52.218 --> 00:04:54.870
que é uma limitação da
herança na linguagem Java.

66
00:04:54.870 --> 00:05:00.005
Você só pode usar herança uma vez por
classe, então a partir do momento que uma

67
00:05:00.005 --> 00:05:06.013
classe estende uma outra, você não
pode ir lá e fazer uma outra herança.

68
00:05:06.013 --> 00:05:11.527
Eu gosto de dizer que a herança é
aquela carta que você só joga uma vez,

69
00:05:11.527 --> 00:05:16.190
então a partir do momento que você
deu aquela cartada e que você está

70
00:05:16.190 --> 00:05:19.948
usando a herança,
que você usou esse recurso uma classe,

71
00:05:19.948 --> 00:05:22.779
você não vai poder usar de
novo para a mesma classe.

72
00:05:22.779 --> 00:05:26.793
Então por isso é que a gente tem que
pensar nossas hierarquias muito bem na

73
00:05:26.793 --> 00:05:32.549
hora que estamos fazendo a modelagem,
porque se a gente começar a usar herança

74
00:05:32.549 --> 00:05:38.274
de forma errada, a gente pode precisar
da herança mesmo e não poder usar,

75
00:05:38.274 --> 00:05:42.289
porque aquele relacionamento já
existe com uma outra classe.

76
00:05:42.289 --> 00:05:48.650
Com certeza no curso como todo, vamos
falar muito mais sobre essas situações aí,

77
00:05:48.650 --> 00:05:53.210
e sobre os cenários que é adequado
estar utilizando a herança.

78
00:05:53.210 --> 00:05:57.360
Para fechar essa aula de herança, a ultima
coisa que eu queria falar para vocês,

79
00:05:57.360 --> 00:06:01.265
é que mesmo que você não coloque extends,

80
00:06:01.265 --> 00:06:06.078
toda classe,
ela vai estender a classe object,

81
00:06:06.078 --> 00:06:11.042
que seria aí digamos assim
o pai de todas as classes,

82
00:06:11.042 --> 00:06:15.700
aquela classe que todas as
classes estendem ela, não é?

83
00:06:15.700 --> 00:06:20.668
Eu lembro que tinha colega meu,
que ele falava que, na empresa dele,

84
00:06:20.668 --> 00:06:25.062
o presidente da empresa,
o pessoal chamava ele de object, porquê?

85
00:06:25.062 --> 00:06:28.878
Porque é aquele cara que está no
topo da hierarquia da empresa.

86
00:06:28.878 --> 00:06:33.781
Então Isso aí é para vocês não esquecerem
que o object é aquela classe que está no

87
00:06:33.781 --> 00:06:36.587
topo da hierarquia das classes Java.

88
00:06:36.587 --> 00:06:40.516
Toda a classe é object,
mesmo que você não coloque

89
00:06:40.516 --> 00:06:44.983
explicitamente extends object,
na verdade a gente não faz isso,

90
00:06:44.983 --> 00:06:50.099
a gente não colocando nada a classe vai
estar estendendo diretamente de object.

91
00:06:50.099 --> 00:06:55.377
O object tem alguns métodos, como o método
equals, para comparação, que a gente pode

92
00:06:55.377 --> 00:07:01.183
sobescrever e que tem algumas outras
classes que utilizam esses recursos aí.

93
00:07:01.183 --> 00:07:06.499
Então é importante saber que mesmo que
você explicitamente não esteja usando

94
00:07:06.499 --> 00:07:11.816
herança, implicitamente a sua classe
está estendendo sempre uma outra classe,

95
00:07:11.816 --> 00:07:16.655
que no caso, se você não especificar
nenhuma, vai ser a classe object.

96
00:07:16.655 --> 00:07:20.352
Então eu espero que com essa aula,
todos vocês tenham entendido melhor

97
00:07:20.352 --> 00:07:25.343
esse conceito de herança, e visto como
Java a gente utiliza ali o extends,

98
00:07:25.343 --> 00:07:30.897
para poder estender ali e herdar os
métodos e atributos de uma outra classe.

99
00:07:30.897 --> 00:07:32.110
Muito obrigado.

100
00:07:32.110 --> 00:07:40.182
Até à próxima aula, que vamos entrar com
mais detalhes nessa parte da herança.

101
00:07:40.182 --> 00:07:43.450
[MÚSICA]
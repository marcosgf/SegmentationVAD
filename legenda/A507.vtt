WEBVTT

1
00:00:00.000 --> 00:00:08.200
[MÚSICA] Meu

2
00:00:08.200 --> 00:00:14.967
nome é Eduardo Guerra, este é o curso
de Orientação a Objetos com Java.

3
00:00:14.967 --> 00:00:18.810
Hoje vamos pegar e exemplificar
o uso de interfaces.

4
00:00:18.810 --> 00:00:23.446
Eu sei que compreender esta ideia
de interfaces não é simples,

5
00:00:23.446 --> 00:00:27.817
eu digo por experiência própria e pelo
dia que eu criei a minha interface,

6
00:00:27.817 --> 00:00:32.334
falei assim: esse problema eu vou
resolver utilizando interfaces.

7
00:00:32.334 --> 00:00:37.270
Aquele dia, eu acho que caiu a ficha de
como fazer a modelagem orientada a objeto.

8
00:00:37.270 --> 00:00:43.093
Eu sei que não é fácil,
então preparei esta aula pra vocês

9
00:00:43.093 --> 00:00:49.980
entenderem melhor como que funcionam as
interfaces, como que elas são utilizadas.

10
00:00:49.980 --> 00:00:55.123
Tenho certeza que muitos de vocês,
assim como eu, quando eu vi a interface

11
00:00:55.123 --> 00:00:59.944
pela primeira vez, eu pensei:
esse negócio não serve pra nada!

12
00:00:59.944 --> 00:01:04.306
O que eu vou fazer com pedaço
de código no qual eu não consigo

13
00:01:04.306 --> 00:01:08.164
colocar lógica nenhuma,
que eu só coloco uns métodos vazios?

14
00:01:08.164 --> 00:01:09.953
Pra que que esse negócio serve?

15
00:01:09.953 --> 00:01:11.454
Isso aí não serve pra nada.

16
00:01:11.454 --> 00:01:15.670
Então, confesso pra vocês que a primeira
vez que eu vi esse negócio de interface

17
00:01:15.670 --> 00:01:18.298
não entendi para o que servia.

18
00:01:18.298 --> 00:01:22.278
Só que pensar assim
você está muito errado.

19
00:01:22.278 --> 00:01:25.477
O uso de interfaces ele é fundamental,

20
00:01:25.477 --> 00:01:31.070
ele é muito importante para você conseguir
a reutilização na orientação a objetos.

21
00:01:31.070 --> 00:01:36.219
E eu vou mostrar pra vocês exemplo
que eu acho que deixa isso bem claro.

22
00:01:36.219 --> 00:01:40.870
É exemplo real inclusive com classes
da própria biblioteca do Java.

23
00:01:40.870 --> 00:01:46.920
Imagine o seguinte: que você queira
implementar algoritmo de ordenação,

24
00:01:46.920 --> 00:01:51.790
que você queira ordenar listas de objetos.

25
00:01:51.790 --> 00:01:55.510
Esse método existe na classe collections,

26
00:01:55.510 --> 00:02:00.390
você pode chamar collections.sort,
pra ele fazer essa organização,

27
00:02:00.390 --> 00:02:05.058
e você pode passar uma lista de objetos
como parâmetro pra este objeto.

28
00:02:05.058 --> 00:02:08.830
Só que existem várias coisas
que podem ser ordenadas...

29
00:02:08.830 --> 00:02:12.871
Por exemplo, você pode ordenar
strings ordem alfabética,

30
00:02:12.871 --> 00:02:14.710
você pode ordenar números.

31
00:02:14.710 --> 00:02:18.760
Por exemplo: às vezes você está
lendo uma lista, por exemplo,

32
00:02:18.760 --> 00:02:23.979
de compras e você quer ordenar

33
00:02:23.979 --> 00:02:28.012
ordem de qual a compra foi maior,
por exemplo.

34
00:02:28.012 --> 00:02:30.560
Ou seja, ordenando por números.

35
00:02:30.560 --> 00:02:35.836
Você pode ordenar datas, por exemplo,
você quer botar as pessoas

36
00:02:35.836 --> 00:02:41.860
na ordem de nascimento, das mais
novas às mais velhas ou o contrário.

37
00:02:41.860 --> 00:02:47.561
Só que não é só isso
que você pode ordenar.

38
00:02:47.561 --> 00:02:52.668
Às vezes você quer ordenar uma
coisa da sua aplicação que tem

39
00:02:52.668 --> 00:02:58.000
uma lógica bem específica do seu negócio.

40
00:02:58.000 --> 00:03:03.030
Por exemplo, imagine que você está
fazendo software que organize,

41
00:03:03.030 --> 00:03:08.460
que ordene ordem de classificação
os candidatos de concurso.

42
00:03:08.460 --> 00:03:13.093
Então vai falar assim: tá certo,
eu vou calcular a média deles de

43
00:03:13.093 --> 00:03:17.750
acordo com esses pesos, e aí quem
tiver a nota maior fica na frente.

44
00:03:17.750 --> 00:03:24.440
Mas se a nota empatar, normalmente tem uma
prova específica que serve como desempate.

45
00:03:24.440 --> 00:03:30.534
E se mesmo assim as coisas forem empatando
de repente você tem critério de desempate

46
00:03:30.534 --> 00:03:37.687
que, por exemplo, alguém que tenha
uma deficiência vai ser colocado na

47
00:03:37.687 --> 00:03:43.133
frente ou alguém que tenha idade maior
também vai ser colocado na frente.

48
00:03:43.133 --> 00:03:47.100
Então tem esses critérios de desempate
que é uma lógica toda complicada.

49
00:03:47.100 --> 00:03:51.620
Pegue aí o edital de concurso que você
vai ver que a ordenação dos candidatos,

50
00:03:51.620 --> 00:03:56.250
principalmente quando empatam nos pontos,
não é nem pouco trivial...

51
00:03:56.250 --> 00:04:01.103
Às vezes, por exemplo, você tem ali
uma lista de investimentos e você

52
00:04:01.103 --> 00:04:04.610
quer ordená-los para descobrir
qual que tem o menor risco.

53
00:04:04.610 --> 00:04:10.200
De repente até você quer maximizar o
seu ganho com o menor risco possível.

54
00:04:10.200 --> 00:04:14.691
Também não é uma ordenação trivial,
como que você calcula esse risco.

55
00:04:14.691 --> 00:04:17.670
Às vezes várias informações
podem estar ligadas a isso.

56
00:04:17.670 --> 00:04:22.788
Às vezes você tem, por exemplo, você quer
fazer ranking de jogadores pela pontuação,

57
00:04:22.788 --> 00:04:26.447
mas de repente você vai
considerar por exemplo,

58
00:04:26.447 --> 00:04:31.200
de repente você vai valorizar mais os
pontos que eles conseguiram no último mês.

59
00:04:31.200 --> 00:04:34.980
Então, pra estimular os
jogadores a jogarem...

60
00:04:34.980 --> 00:04:38.497
Então você pode precisar fazer
ordenações que tenham lógicas

61
00:04:38.497 --> 00:04:41.820
extremamente complicadas e
extremamente específicas.

62
00:04:41.820 --> 00:04:46.790
Aí você falar assim:
mas como que método lá

63
00:04:46.790 --> 00:04:51.895
do Java Collections.Sort,

64
00:04:51.895 --> 00:04:56.266
como que método desses
vai saber ordenar os meus

65
00:04:56.266 --> 00:05:01.030
objetos por critério
extremamente específico?

66
00:05:01.030 --> 00:05:05.060
Será que consigo reutilizar
esse método Sort para isso?

67
00:05:05.060 --> 00:05:08.680
A gente vai ver que com o uso de
interfaces a gente consegue, sim.

68
00:05:08.680 --> 00:05:09.533
Por quê?

69
00:05:09.533 --> 00:05:12.210
Porque o algoritmo é o mesmo.

70
00:05:12.210 --> 00:05:17.265
O objeto só tem que me dizer, a partir de
momento que eu chego e falo assim: olha,

71
00:05:17.265 --> 00:05:20.502
eu tenho objeto A e objeto B,
qual é o maior?

72
00:05:20.502 --> 00:05:22.074
Qual vem na frente?

73
00:05:22.074 --> 00:05:25.230
Se o meu objeto conseguir me dizer isso,

74
00:05:25.230 --> 00:05:29.542
ele pode ter uma lógica extremamente
complicada interna ali, que,

75
00:05:29.542 --> 00:05:34.078
de repente, o meu método que está
fazendo a ordenação não precisa saber.

76
00:05:34.078 --> 00:05:40.240
Então, eu posso definir esse contrato de
comparação a partir de uma interface.

77
00:05:40.240 --> 00:05:46.120
E note que esses objetos que eu
citei aqui no slide anterior

78
00:05:46.120 --> 00:05:51.240
são de classes que talvez
tenham sua própria hierarquia.

79
00:05:51.240 --> 00:05:56.400
O fato de ser uma interface permite
que eles possam ser comparable,

80
00:05:56.400 --> 00:05:58.859
que eles possam implementar comparable,

81
00:05:58.859 --> 00:06:03.468
independente de terem uma hierarquia
que não tem nada a ver com isso.

82
00:06:03.468 --> 00:06:07.222
A aplicação pode ter sua
hierarquia e suas classes.

83
00:06:07.222 --> 00:06:09.972
E aquela classe pode
implementar a interface.

84
00:06:09.972 --> 00:06:13.447
Então essa interface,
como eu falei, é exemplo real,

85
00:06:13.447 --> 00:06:19.370
ela realmente existe na biblioteca básica
do Java, que é a interface Comparable.

86
00:06:19.370 --> 00:06:23.408
Se você implementa essa interface
Comparable, você tem que implementar esse

87
00:06:23.408 --> 00:06:29.460
método CompareTo, onde você passa objeto
e ele te retorna inteiro positivo,

88
00:06:29.460 --> 00:06:33.676
negativo ou zero,
que vai significar se é maior ou menor.

89
00:06:33.676 --> 00:06:38.740
Então o método do sort recebe
uma lista de Comparables.

90
00:06:38.740 --> 00:06:42.945
Então, pode ser lista de qualquer objeto,

91
00:06:42.945 --> 00:06:47.612
desde que tenha essa interface Comparable.

92
00:06:47.612 --> 00:06:51.786
E aí todos aqueles meus objetos,
sejam eles uma String,

93
00:06:51.786 --> 00:06:57.298
Date ou qualquer número ou integer,

94
00:06:57.298 --> 00:07:03.708
dado da máquina virtual, tanto como
a classe candidato, a classe jogador,

95
00:07:03.708 --> 00:07:08.550
a classe investimento ou qualquer
outra classe que eu queira ordenar.

96
00:07:08.550 --> 00:07:13.958
Desde que eles implementem Comparable,
a lista de qualquer deles

97
00:07:13.958 --> 00:07:19.630
pode ser passada por método sort, porque o
método sort vai saber fazer uma ordenação.

98
00:07:19.630 --> 00:07:20.337
Por quê?

99
00:07:20.337 --> 00:07:22.910
Porque ele não depende da classe.

100
00:07:22.910 --> 00:07:26.558
Ele depende da interface
que essa classe implementa.

101
00:07:26.558 --> 00:07:30.287
Então a partir daquele
momento ele fala assim: olha,

102
00:07:30.287 --> 00:07:34.760
só me passe classes que tenham
esse contrato Comparable.

103
00:07:34.760 --> 00:07:39.458
E se a sua classe tem isso,
você pode reutilizar aquele método,

104
00:07:39.458 --> 00:07:44.185
olha que negócio bacana,
você pode pegar a sua classe que você

105
00:07:44.185 --> 00:07:48.561
acabou de criar e passar
ela para método que foi

106
00:07:48.561 --> 00:07:53.573
criado há muito tempo atrás
por pessoas que você nem sabe,

107
00:07:53.573 --> 00:07:58.830
e esse método vai usar a sua classe,
ele vai saber usar a sua classe.

108
00:07:58.830 --> 00:08:02.037
E tudo isso só é possível
por causa das interfaces.

109
00:08:02.037 --> 00:08:06.005
Se você perguntar para o método
sort: você conhece essa classe?

110
00:08:06.005 --> 00:08:11.299
"Não conheço, não." Agora se perguntar:
mas você conhece a interface dessa classe,

111
00:08:11.299 --> 00:08:13.524
você conhece o contrato dessa classe?

112
00:08:13.524 --> 00:08:16.770
" esse eu conheço!" Pra mim,
isso é o suficiente.

113
00:08:16.770 --> 00:08:22.208
O reuso de código na orientação
a objeto está ligado

114
00:08:22.208 --> 00:08:28.030
ao fato de que o código não precisa ser
feito especificamente para a sua classe.

115
00:08:28.030 --> 00:08:33.470
E você consegue criar códigos

116
00:08:33.470 --> 00:08:40.110
que conseguem ser utilizados para
classes que nem foram criadas ainda.

117
00:08:40.110 --> 00:08:42.548
Como que eu consigo fazer isso?

118
00:08:42.548 --> 00:08:46.403
Criando códigos que são
feitos para o contrato.

119
00:08:46.403 --> 00:08:49.621
Vez de eles serem feitos
para uma classe específica,

120
00:08:49.621 --> 00:08:52.060
são códigos feitos para as interfaces.

121
00:08:52.060 --> 00:08:56.934
Então eu espero que com esse exemplo
tenha ficado mais claro pra todo

122
00:08:56.934 --> 00:09:00.850
mundo como que essas
interfaces são importantes.

123
00:09:00.850 --> 00:09:05.536
Como que é interessante você
conseguir criar o seu código baseado

124
00:09:05.536 --> 00:09:08.280
nessas interfaces.

125
00:09:08.280 --> 00:09:12.250
E de forma que esse código
possa ser reutilizado

126
00:09:12.250 --> 00:09:16.641
pra outras classes que você não conhece,
que você não previu, certo,

127
00:09:16.641 --> 00:09:22.190
desde que eles mantenham aquele contrato
para o qual você criou aquele código.

128
00:09:22.190 --> 00:09:28.279
Então espero que essa ideia tenha
ficado mais clara pra vocês nessa aula.

129
00:09:28.279 --> 00:09:29.830
Até a próxima aula.

130
00:09:29.830 --> 00:09:35.920
[MÚSICA]
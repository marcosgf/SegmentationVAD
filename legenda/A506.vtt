WEBVTT

1
00:00:00.000 --> 00:00:08.296
[MÚSICA] Este

2
00:00:08.296 --> 00:00:13.201
é o curso de orientação
a objetos com Java.

3
00:00:13.201 --> 00:00:14.914
Meu nome é Eduardo Guerra.

4
00:00:14.914 --> 00:00:17.672
Hoje vamos falar sobre interfaces Java.

5
00:00:17.672 --> 00:00:22.340
Na aula anterior a gente falou sobre
as interfaces de uma forma mais geral,

6
00:00:22.340 --> 00:00:27.870
agora vamos entender como que funcionam
essas interfaces na linguagem Java.

7
00:00:27.870 --> 00:00:29.132
Então vamos lá.

8
00:00:29.132 --> 00:00:34.100
A gente terminou o exemplo que
a gente utilizou na outra aula foi aí

9
00:00:34.100 --> 00:00:35.929
o da interface móvel.

10
00:00:35.929 --> 00:00:40.162
Então teríamos aí a classe cavalo,
a classe carro,

11
00:00:40.162 --> 00:00:43.837
todas essas implementando
a interface móvel.

12
00:00:43.837 --> 00:00:46.569
Como que eu defino uma interface Java?

13
00:00:46.569 --> 00:00:50.169
Então, ao invés de eu criar,
por exemplo, "public class",

14
00:00:50.169 --> 00:00:53.230
eu vou criar uma "public interface móvel".

15
00:00:53.230 --> 00:00:59.100
E aí eu vou definir quais são os
métodos que têm naquela interface.

16
00:00:59.100 --> 00:01:03.960
Só que ao invés de eu pegar e
colocar a implementação do método,

17
00:01:03.960 --> 00:01:08.190
eu vou colocar ponto e vírgula
depois que eu terminar de defini-lo.

18
00:01:08.190 --> 00:01:09.738
O que significa isso?

19
00:01:09.738 --> 00:01:13.961
Significa que aquele método
não tem implementação.

20
00:01:13.961 --> 00:01:16.867
Ele vai ser método abstrato.

21
00:01:16.867 --> 00:01:19.423
Como a gente viu lá nas classes abstratas.

22
00:01:19.423 --> 00:01:22.640
E aí você me pergunta porquê que eu
não coloco "Abstract" naquele método?

23
00:01:22.640 --> 00:01:26.760
A resposta é: você pode colocar
"abstract" naquele método,

24
00:01:26.760 --> 00:01:33.690
mas a questão é que todos os métodos de
uma interface, eles sempre são abstratos.

25
00:01:33.690 --> 00:01:41.155
Então, é opcional você colocar ou não a
palavra "abstract" no método da interface.

26
00:01:41.155 --> 00:01:42.816
Mas você pode colocar.

27
00:01:42.816 --> 00:01:43.481
Porquê?

28
00:01:43.481 --> 00:01:45.150
Porque ele é abstrato.

29
00:01:45.150 --> 00:01:48.991
Esses métodos da interface
eles vão ser bem no estilo,

30
00:01:48.991 --> 00:01:54.094
por exemplo, dos métodos de uma classe,
daquele método da classe abstrata,

31
00:01:54.094 --> 00:01:57.680
que você deixa ele sem
uma definição concreta.

32
00:01:57.680 --> 00:02:02.218
É aquele que vai ser obrigatório
de ser implementado na

33
00:02:02.218 --> 00:02:06.208
subclasse ou pelo menos
numa subclasse concreta.

34
00:02:06.208 --> 00:02:09.420
Então, o quê que você pode
colocar numa interface?

35
00:02:09.420 --> 00:02:15.173
Numa interface você pode colocar métodos
abstratos, dessa forma que eu mostrei e

36
00:02:15.173 --> 00:02:21.220
você pode também colocar atributos finais
e estáticos, ou seja, constantes,está?

37
00:02:21.220 --> 00:02:25.347
Ou seja, você fala assim: olha,
estou definindo aqui,

38
00:02:25.347 --> 00:02:29.278
por exemplo, public, static, W, π.

39
00:02:29.278 --> 00:02:33.520
Aí você tá definindo lá a constante π.

40
00:02:33.520 --> 00:02:36.760
Então esse tipo de definição, constantes,

41
00:02:36.760 --> 00:02:42.321
que são aquelas variáveis que são statical
5, essas você pode definir numa interface.

42
00:02:42.321 --> 00:02:45.300
Agora, todo o resto você não pode.

43
00:02:45.300 --> 00:02:48.972
Você não pode colocar
atributos de instância,

44
00:02:48.972 --> 00:02:54.831
você não pode definir métodos, mas só
se esse método for abstrato, aí pode.

45
00:02:54.831 --> 00:03:00.405
Agora, definir a implementação de
método numa interface, você não pode.

46
00:03:00.405 --> 00:03:05.180
O quê que vai acontecer, por exemplo,
com uma classe que implementar?

47
00:03:05.180 --> 00:03:09.781
Então a gente utiliza
a palavra "implements"

48
00:03:09.781 --> 00:03:13.866
para dizer que uma classe
ela tem aquela interface.

49
00:03:13.866 --> 00:03:18.864
E aí no momento, por exemplo,
se eu definir "public class Cavalo,

50
00:03:18.864 --> 00:03:23.853
implements Movel", significa que
aquela classe "cavalo" precisa

51
00:03:23.853 --> 00:03:29.463
implementar todos aqueles métodos que
eu defini na minha interface móvel.

52
00:03:29.463 --> 00:03:33.530
Aí você me pergunta: e se a classe for
abstrata?

53
00:03:33.530 --> 00:03:39.178
Se a classe for abstrata, é como se
aqueles métodos da interface fossem

54
00:03:39.178 --> 00:03:44.250
os métodos abstratos daquela classe,
se você não quiser defini-las.

55
00:03:44.250 --> 00:03:47.416
Está?
Então, por exemplo, imagine aqui que eu

56
00:03:47.416 --> 00:03:52.390
pego a classe veículo, que é uma
classe abstrata e implemento o Movel.

57
00:03:52.390 --> 00:03:54.659
O quê que vai acontecer?

58
00:03:54.659 --> 00:03:56.820
Essa classe abstrata,

59
00:03:56.820 --> 00:04:01.640
ela pode implementar todos os métodos
da interface, mas ela não é obrigada.

60
00:04:01.640 --> 00:04:04.120
E aí, mesmo que eu não coloque nada,

61
00:04:04.120 --> 00:04:08.520
é como se aquele método fosse
método abstrato daquela classe.

62
00:04:08.520 --> 00:04:12.405
E aí,
todas as subclasses que forem concretas,

63
00:04:12.405 --> 00:04:17.108
essas sim são obrigadas a implementar
todos os métodos da interface.

64
00:04:17.108 --> 00:04:17.682
Porquê?

65
00:04:17.682 --> 00:04:22.182
Porque se uma classe ela estende uma
classe que estende uma interface,

66
00:04:22.182 --> 00:04:24.930
ela também implementa aquela interface.

67
00:04:24.930 --> 00:04:29.627
Ela também pode ser passada por
parâmetro onde eu disser que aceito uma

68
00:04:29.627 --> 00:04:32.125
classe que implemente aquela interface.

69
00:04:32.125 --> 00:04:36.808
Qualquer subclasse de uma classe que
complementa a interface também vai ser uma

70
00:04:36.808 --> 00:04:38.531
classe que implementa.

71
00:04:38.531 --> 00:04:43.487
Uma coisa interessante na interface,
que é diferente da herança das

72
00:04:43.487 --> 00:04:49.144
classes que eu só posso
estar estendendo uma classe,

73
00:04:49.144 --> 00:04:54.075
uma interface ela também pode
estender outras interfaces,

74
00:04:54.075 --> 00:04:56.748
só que ela pode estender mais de uma.

75
00:04:56.748 --> 00:05:02.031
Diferente da classe, que só pode estender
uma outra classe ou pode estender duas,

76
00:05:02.031 --> 00:05:06.651
uma interface pode estender
outras interfaces, mais de uma.

77
00:05:06.651 --> 00:05:08.352
Então por exemplo,

78
00:05:08.352 --> 00:05:13.283
imagine que eu tenho aí uma interface
com canais, uma interface ligável,

79
00:05:13.283 --> 00:05:17.984
eu posso ter uma interface televisor,
que estende essas duas interfaces.

80
00:05:17.984 --> 00:05:19.703
O quê que significa isso?

81
00:05:19.703 --> 00:05:23.308
Que essa interface que estende as duas,
el tem que ter,

82
00:05:23.308 --> 00:05:27.930
é como se ela definisse todos os
métodos que aquelas interfaces possuem.

83
00:05:27.930 --> 00:05:32.430
Além de uma interface poder
estender mais de uma interface,

84
00:05:32.430 --> 00:05:38.460
uma classe pode implementar
mais de uma interface.

85
00:05:38.460 --> 00:05:43.066
Então por exemplo, imagine que
estou definindo uma classe SmartTV,

86
00:05:43.066 --> 00:05:46.712
que implementa televisor
e player de vídeo.

87
00:05:46.712 --> 00:05:51.691
Então a diferença vai ser: aquela
classe vai ter que definir todos

88
00:05:51.691 --> 00:05:56.178
os métodos que estão na interface
televisor e todos os métodos que estão na

89
00:05:56.178 --> 00:05:58.301
interface do player de vídeo.

90
00:05:58.301 --> 00:06:02.480
E aí, mesma coisa,
ela vai ter todas aquelas interfaces.

91
00:06:02.480 --> 00:06:06.681
E aí se eu pergunto,
por exemplo: essa classe SmartTV,

92
00:06:06.681 --> 00:06:09.980
ela vai implementar interface com canais?

93
00:06:09.980 --> 00:06:11.341
Sim, com certeza.

94
00:06:11.341 --> 00:06:11.982
Porquê?

95
00:06:11.982 --> 00:06:15.544
Porque ele implementa
televisor e televisor,

96
00:06:15.544 --> 00:06:19.710
como a gente viu aqui,
estende o com canais.

97
00:06:19.710 --> 00:06:25.973
Então, indiretamente, a classe
SmartTV tem aquela interface, porquê?

98
00:06:25.973 --> 00:06:30.670
Porque ela de uma certa forma precisou
também definir todos os métodos

99
00:06:30.670 --> 00:06:33.102
que estavam nela.

100
00:06:33.102 --> 00:06:38.799
Então resumindo pouco aqui:
uma classe pode implementar

101
00:06:38.799 --> 00:06:42.980
mais de uma interface e uma interface
pode estender mais de uma interface.

102
00:06:42.980 --> 00:06:50.770
Então a herança de interfaces não tem essa
restrição que tem a herança de classes,

103
00:06:50.770 --> 00:06:55.145
que diz que a classe só pode
estender uma outra classe.

104
00:06:55.145 --> 00:06:59.520
E a interface pode estender
mais de uma interface.

105
00:06:59.520 --> 00:07:03.830
E a classe pode implementar mais de
uma interface, como a gente viu.

106
00:07:03.830 --> 00:07:06.665
Então com isso espero que você,

107
00:07:06.665 --> 00:07:12.460
na aula anterior a gente viu os
conceitos sobre interface e nessa aula

108
00:07:12.460 --> 00:07:17.504
a gente viu pouco sobre como
estar utilizando esse conceito

109
00:07:17.504 --> 00:07:22.790
de interfaces dentro da linguagem Java,
entendendo aí como definir uma interface,

110
00:07:22.790 --> 00:07:27.034
como fazer uma classe, implementar uma
interface, entendendo aí que uma classe

111
00:07:27.034 --> 00:07:32.040
pode implementar várias interfaces, ou uma
interface pode estender outras interfaces.

112
00:07:32.040 --> 00:07:33.988
Espero que tenha ficado claro.

113
00:07:33.988 --> 00:07:35.070
Muito obrigado.

114
00:07:35.070 --> 00:07:42.571
Até à próxima aula, onde vamos nos
aprofundar ainda mais nesse conceito.

115
00:07:42.571 --> 00:07:45.260
[MÚSICA]
WEBVTT

1
00:00:00.000 --> 00:00:09.035
[MÚSICA] [MÚSICA] Olá,

2
00:00:09.035 --> 00:00:13.180
bem vindo ao curso de
orientação a objetos com Java.

3
00:00:13.180 --> 00:00:14.830
Eu sou o Clovis Fernandes.

4
00:00:14.830 --> 00:00:20.172
Hoje iremos falar de colaboração,
dependência, e classes cliente e servidor.

5
00:00:20.172 --> 00:00:25.610
Você irá aprender a caracterizar e
diferenciar cada desses conceitos.

6
00:00:25.610 --> 00:00:30.031
Nós vimos anteriormente os conceitos
de responsabilidade e colaboração no

7
00:00:30.031 --> 00:00:31.916
contexto de cartões CRC.

8
00:00:31.916 --> 00:00:36.628
Agora iremos avançar pouco mais
e caracterizar os conceitos de

9
00:00:36.628 --> 00:00:41.340
colaboração dependência,
classe cliente e classe servidora.

10
00:00:41.340 --> 00:00:44.710
Iniciamos por "Dependência entre Classes".

11
00:00:44.710 --> 00:00:50.545
No nosso exemplo que tínhamos utilizado
para falar de cartões CRC nós apresentamos

12
00:00:50.545 --> 00:00:55.926
o exemplo da "Classe Biblioteca",
que dependia da "Classe Livro".

13
00:00:55.926 --> 00:01:00.780
A "Classe Biblioteca" dependia
também da "Classe Usuario".

14
00:01:00.780 --> 00:01:05.500
Fizemos diagrama que nós
mostramos essa dependência.

15
00:01:05.500 --> 00:01:08.820
Mas, o que é que é essa dependência então?

16
00:01:08.820 --> 00:01:14.550
Isso tem haver com a necessidade
que uma classe tem

17
00:01:14.550 --> 00:01:19.780
relação a outras classes para
realizar as suas responsabilidades.

18
00:01:19.780 --> 00:01:25.529
Se objeto "Biblioteca" não pode
existir sem a colaboração de livro,

19
00:01:25.529 --> 00:01:30.390
então, existe uma dependência
entre biblioteca e livro.

20
00:01:30.390 --> 00:01:34.621
Se ele não pode existir sem
a colaboração do usuário,

21
00:01:34.621 --> 00:01:38.991
então existe uma dependência
entre biblioteca e usuário.

22
00:01:38.991 --> 00:01:43.533
Vamos exemplificar pouco para tornar
pouquinho mais concreto esse assunto.

23
00:01:43.533 --> 00:01:49.479
A responsabilidade "Empresta livro" da
classe "Biblioteca" para realizar as,

24
00:01:49.479 --> 00:01:54.680
todas as suas ações, ela precisa da
colaboração da classe colaboradora

25
00:01:54.680 --> 00:01:59.960
"Livro", especial da
responsabilidade e da colaboração,

26
00:01:59.960 --> 00:02:05.800
que é uma responsabilidade de livro,
que é o "Anexa, usuário do empréstimo".

27
00:02:05.800 --> 00:02:09.648
Então, para que o "empresta" livro possa

28
00:02:09.648 --> 00:02:13.930
ser realizado ele precisa
dessa colaboração.

29
00:02:13.930 --> 00:02:17.754
Então existe uma dependência muito grande.

30
00:02:17.754 --> 00:02:22.470
Sem essa colaboração ele não
consegue terminar as suas

31
00:02:22.470 --> 00:02:24.923
ações pelas quais ele é responsável.

32
00:02:24.923 --> 00:02:30.221
Dessa forma isso vai caracterizar então,
que a "Classe Biblioteca" ela é uma

33
00:02:30.221 --> 00:02:35.190
classe cliente, tanto da classe livro,

34
00:02:35.190 --> 00:02:39.150
quanto da usuário,
porque as suas responsabilidades,

35
00:02:39.150 --> 00:02:44.958
algumas delas dependem de "livro"
outras dependem de "usuário".

36
00:02:44.958 --> 00:02:48.332
Quando o objeto ou classe cliente usa,

37
00:02:48.332 --> 00:02:52.920
o objeto ou classe "servidor"
como argumento de construtor,

38
00:02:52.920 --> 00:03:00.370
como argumento de métodos,
como parâmetros de criação de objeto,

39
00:03:00.370 --> 00:03:05.720
parâmetros de mensagens
para outros objetos,

40
00:03:05.720 --> 00:03:10.870
como tipos das variáveis de
instância e das variáveis locais

41
00:03:10.870 --> 00:03:16.227
ou temporárias que eu estou usando e
também como tipo de retorno dos métodos,

42
00:03:16.227 --> 00:03:20.940
isso vai então caracterizar essa
dependência da classe ou objeto

43
00:03:20.940 --> 00:03:24.160
cliente relação à classe servidora.

44
00:03:24.160 --> 00:03:28.873
Neste ponto, cabe perguntar, quais
são as classes servidoras de uma dada

45
00:03:28.873 --> 00:03:32.713
classe termos de
colaboração e dependência?

46
00:03:32.713 --> 00:03:38.046
Nós vamos caracterizar três tipos
diferentes de classes servidoras:

47
00:03:38.046 --> 00:03:43.295
Uma "outra classe",
a "superclasse" e "A própria classe".

48
00:03:43.295 --> 00:03:46.880
As três classes poderão
ser classes servidoras.

49
00:03:46.880 --> 00:03:49.350
Vamos começar então pela "Outra classe".

50
00:03:49.350 --> 00:03:53.198
Nesse exemplo nós temos a classe "Empresa"

51
00:03:53.198 --> 00:03:57.880
e ela produz só para exemplificar,
uma mercadoria.

52
00:03:57.880 --> 00:04:05.220
A classe "Empresa" é cliente,
e a classe "Mercadoria" ela é servidora.

53
00:04:05.220 --> 00:04:09.289
Já existe uma dependência aí, porque,

54
00:04:09.289 --> 00:04:15.397
quando eu coloco aí "-mercadoria",
começando com letra minuscula,

55
00:04:15.397 --> 00:04:22.518
eu estou querendo dizer que na classe
"Empresa" eu tenho que relacionar

56
00:04:22.518 --> 00:04:28.860
atributo que eu já vou
chamar de "Mercadoria" para

57
00:04:28.860 --> 00:04:33.880
guardar essa associação
com objeto "mercadoria".

58
00:04:33.880 --> 00:04:38.498
Mas como é que isso fica no
geral relação à construtora,

59
00:04:38.498 --> 00:04:43.088
métodos, tipos de retornos de
métodos e variáveis de instância?

60
00:04:43.088 --> 00:04:44.392
Como é que fica isso?

61
00:04:44.392 --> 00:04:48.299
Eu vou mostrar para vocês uma
coisa que a gente chama de código

62
00:04:48.299 --> 00:04:53.025
arquitetural ou implícito que
se refere a essa estrutura,

63
00:04:53.025 --> 00:04:58.517
a essa associação que está aí mostrada
entre "Empresa" e "Mercadoria".

64
00:04:58.517 --> 00:05:02.895
Olhamos aqui que a classe
"Empresa" ela tem construtor

65
00:05:02.895 --> 00:05:07.180
que eu estou passando parâmetro que
tem haver com a sua associação,

66
00:05:07.180 --> 00:05:11.610
que no caso é objeto da
classe "Mercadoria".

67
00:05:11.610 --> 00:05:15.358
Então "Mercadoria",
ali nesse construtor, ele é argumento,

68
00:05:15.358 --> 00:05:16.920
o argumento do construtor.

69
00:05:16.920 --> 00:05:21.941
Dentro, eu estou usando,
passando uma mensagem que é

70
00:05:21.941 --> 00:05:26.927
o "associaMercadoria" que eu
estou passando o "Mercadoria"

71
00:05:26.927 --> 00:05:31.649
que era argumento,
agora ele passa-se a chamar "parâmetro".

72
00:05:31.649 --> 00:05:34.090
Ele é parâmetro dessa mensagem.

73
00:05:34.090 --> 00:05:39.563
Eu tenho aí também,
o método privado "associaMercadoria"

74
00:05:39.563 --> 00:05:44.688
que "Mercadoria" é o parâmetro,
é o argumento que eu

75
00:05:44.688 --> 00:05:49.981
vou usar para fazer essa associação
de "Mercadoria" com "Empresa".

76
00:05:49.981 --> 00:05:54.510
O método "getMercadoria" tem tipo
de retorno que é "mercadoria".

77
00:05:54.510 --> 00:05:58.486
A variável "Mercadoria"
que eu tinha colocado já

78
00:05:58.486 --> 00:06:01.640
naquela descrição de classes "UML".

79
00:06:01.640 --> 00:06:07.447
O tipo da variável de instância também
é "Mercadoria" e é do tipo privado.

80
00:06:07.447 --> 00:06:11.698
Essa estrutura que acabamos de ver,
a gente chama de "Código

81
00:06:11.698 --> 00:06:16.398
arquitetural ou implícito" e iremos
tratar disso ao longo também do curso.

82
00:06:16.398 --> 00:06:19.360
O segundo tipo,
tem haver com "Superclasse".

83
00:06:19.360 --> 00:06:21.585
No exemplo que eu estou mostrando aí,

84
00:06:21.585 --> 00:06:24.505
eu estou usando mercadoria
e o "Item de venda".

85
00:06:24.505 --> 00:06:29.180
Pelo simples fato de haver uma
herança o "Item de Venda",

86
00:06:29.180 --> 00:06:32.275
ele já depende da "Superclasse".

87
00:06:32.275 --> 00:06:34.165
Então existe uma dependência,

88
00:06:34.165 --> 00:06:40.011
porque ele vai herdar todos os métodos
públicos que o "Mercadoria" tem aí.

89
00:06:40.011 --> 00:06:40.700
Certo?

90
00:06:40.700 --> 00:06:45.327
Mas mais do que isso, o que é que se
fez nessa classe "Item de venda"?

91
00:06:45.327 --> 00:06:49.722
O método "Imprimir Tíquete"
do "Item de venda",

92
00:06:49.722 --> 00:06:55.056
na lógica do "Item de imprimir
tíquete" usa o método

93
00:06:55.056 --> 00:07:01.161
de "Atualizar Estoque" que ele
herdou da classe "Mercadoria".

94
00:07:01.161 --> 00:07:06.018
Exemplo de uma dupla dependêcia;
depende da classe que

95
00:07:06.018 --> 00:07:10.514
vai herdar e ao mesmo tempo
eu estou usando o método da

96
00:07:10.514 --> 00:07:14.970
"Superclasse" dentro,
na lógica do meu próprio método.

97
00:07:14.970 --> 00:07:18.037
Então isso é segundo tipo de dependêcia.

98
00:07:18.037 --> 00:07:22.690
Terceiro tipo de classe servidora
é a própria classe de "cliente".

99
00:07:22.690 --> 00:07:29.264
Também vai ser servidora dela mesma,
ou seja, vai ter algumas necessidades,

100
00:07:29.264 --> 00:07:34.042
algumas responsabilidades
que eu vou complementar

101
00:07:34.042 --> 00:07:38.006
com base nas responsabilidades
da própria classe.

102
00:07:38.006 --> 00:07:41.587
Uma alternativa que eu estou mostrando aí,

103
00:07:41.587 --> 00:07:46.798
eu estou olhando a parte da
associação com mercadoria e eu

104
00:07:46.798 --> 00:07:51.893
tenho o método privado
"associaMercadoria" passando o

105
00:07:51.893 --> 00:07:56.977
parâmetro a uma mercadoria
da classe "mercadoria".

106
00:07:56.977 --> 00:08:02.245
A mensagem que faz o acesso
ao próprio objeto está ali

107
00:08:02.245 --> 00:08:09.390
dentro do construtor e está
representado pelo pelo nome "this".

108
00:08:09.390 --> 00:08:12.760
Então
"this.associaMercadoria(mercadoria)".

109
00:08:12.760 --> 00:08:17.231
Isso é uma mensagem que eu estou
fazendo e eu estou usando o

110
00:08:17.231 --> 00:08:19.373
próprio objeto da classe.

111
00:08:19.373 --> 00:08:22.145
Então isso está dentro
do próprio construtor,

112
00:08:22.145 --> 00:08:26.119
mas poderia estar dentro de qualquer
dos métodos da classe "Empresa".

113
00:08:26.119 --> 00:08:31.270
Há outro tipo de associação, é a de
"Empresa" com uma própria "Empresa".

114
00:08:31.270 --> 00:08:34.485
Então, eu por exemplo estou
querendo representar,

115
00:08:34.485 --> 00:08:37.614
que a empresa tem concorrente,
por exemplo.

116
00:08:37.614 --> 00:08:41.080
Ela tem uma mercadoria e
ela vai ter concorrente.

117
00:08:41.080 --> 00:08:46.118
Então, eu estou fazendo que
o concorrente dele é o quê?

118
00:08:46.118 --> 00:08:47.476
É uma empresa também.

119
00:08:47.476 --> 00:08:51.152
Então eu vou representar dentro
da classe "Empresa" o seu

120
00:08:51.152 --> 00:08:55.530
concorrente que vai ser
também da classe "Empresa".

121
00:08:55.530 --> 00:08:56.808
Está certo?

122
00:08:56.808 --> 00:09:02.317
Pelo fato de ser empresa e estar
representado lá dentro, não

123
00:09:02.317 --> 00:09:08.061
quer dizer que eu tenho acesso às coisas
internas da outra empresa concorrente.

124
00:09:08.061 --> 00:09:10.323
Não, só através dos métodos.

125
00:09:10.323 --> 00:09:13.020
E como é que a gente representa isso?

126
00:09:13.020 --> 00:09:18.177
A outra associação anterior com
mercadoria, eu fiz através do construtor.

127
00:09:18.177 --> 00:09:22.379
Agora eu vou fazer uma associação
com uma outra empresa,

128
00:09:22.379 --> 00:09:26.030
através de método "associaPúblico".

129
00:09:26.030 --> 00:09:27.996
Vamos dar uma olhada.

130
00:09:27.996 --> 00:09:33.172
Então o acesso a outro objeto
da mesma classe é feito através

131
00:09:33.172 --> 00:09:38.053
do "associa",
desse método que é público e se não for

132
00:09:38.053 --> 00:09:41.612
público, eu não vou
conseguir acessar objeto,

133
00:09:41.612 --> 00:09:46.349
mesmo sendo da empresa eu não vou
acessar o objeto "Empresa" se o

134
00:09:46.349 --> 00:09:51.440
"associa" não for
público e passo qual é a empresa.

135
00:09:51.440 --> 00:09:55.549
Então eu estou passando para o objeto
"Empresa" qual é que é o seu concorrente.

136
00:09:55.549 --> 00:09:57.490
Eu vou exemplificar logo de seguida.

137
00:09:57.490 --> 00:10:03.330
E também eu fico sabendo através do
"getEmpresa" quem é essa empresa.

138
00:10:03.330 --> 00:10:10.148
E tenho o método privado "Empresa",
da classe "Empresa".

139
00:10:10.148 --> 00:10:14.404
Continuando, agora eu vou
mostrar como é que eu uso isso.

140
00:10:14.404 --> 00:10:18.380
Eu vou exemplificar o acesso
a outro objeto da classe,

141
00:10:18.380 --> 00:10:22.990
sendo que é a mesma classe,
mas são objetos distintos,

142
00:10:22.990 --> 00:10:26.690
embora o objeto esteja dentro
do outro neste exemplo aqui.

143
00:10:26.690 --> 00:10:30.020
Então eu crio uma mercadoria,
"new Mercadoria",

144
00:10:30.020 --> 00:10:35.010
crio uma empresa, e ao criar
a empresa eu faço associação com

145
00:10:35.010 --> 00:10:39.275
a mercadoria porque essa empresa só
tem uma mercadoria neste exemplo.

146
00:10:39.275 --> 00:10:41.490
Aí eu crio uma empresa concorrente.

147
00:10:41.490 --> 00:10:44.487
Ao criar empresa concorrente,
ela também tem uma mercadoria.

148
00:10:44.487 --> 00:10:47.538
Se é concorrente vai ser o mesmo
tipo de mercadoria provavelmente,

149
00:10:47.538 --> 00:10:49.320
por isso é que eu estou repetindo aqui.

150
00:10:49.320 --> 00:10:54.204
Aí, eu associo
empresa.associaEmpresa(concorrente) Então

151
00:10:54.204 --> 00:10:58.965
nesse momento, eu estou fazendo essa

152
00:10:58.965 --> 00:11:03.625
associação e lá dentro do objeto empresa,

153
00:11:03.625 --> 00:11:07.417
agora o concorrente é essa nova
empresa que eu acabei de criar.

154
00:11:07.417 --> 00:11:11.529
Com isso acabamos de mostrar os
conceitos de colaboração, dependência,

155
00:11:11.529 --> 00:11:13.790
classes clientes e classes servidoras.

156
00:11:13.790 --> 00:11:18.481
Falamos muito superficialmente
sobre código arquitetural.

157
00:11:18.481 --> 00:11:21.001
Isso vai ser tratado futuramente.

158
00:11:21.001 --> 00:11:21.845
Obrigado.

159
00:11:21.845 --> 00:11:26.890
[MÚSICA]
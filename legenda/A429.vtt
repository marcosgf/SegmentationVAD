WEBVTT

1
00:00:00.000 --> 00:00:08.123
[MÚSICA] [MÚSICA]

2
00:00:08.123 --> 00:00:10.820
Meu nome é Eduardo Guerra.

3
00:00:10.820 --> 00:00:15.375
Este é o curso de Desenvolvimento
de Software Guiado por Testes e

4
00:00:15.375 --> 00:00:20.166
hoje vamos estar falando aqui
sobre aceitar Mock Objects, está.

5
00:00:20.166 --> 00:00:24.600
A gente falou na aula passada
que a gente pode substituir uma

6
00:00:24.600 --> 00:00:28.516
dependência por Mock Object,
mas para que isso aconteça,

7
00:00:28.516 --> 00:00:32.119
a nossa classe precisa aceitar
essas dependências, está?

8
00:00:32.119 --> 00:00:36.636
Então, hoje a gente vai aprender que
características a gente tem que colocar na

9
00:00:36.636 --> 00:00:42.924
nossa classe, para que a nossa classe
consiga aceitar essas dependências,

10
00:00:42.924 --> 00:00:47.150
de aceitar os Mock Objects
no lugar das dependências.

11
00:00:47.150 --> 00:00:47.868
Está?

12
00:00:47.868 --> 00:00:52.015
Então, nem sempre a gente consegue trocar

13
00:00:52.015 --> 00:00:55.780
facilmente uma dependência
por Mock Object.

14
00:00:55.780 --> 00:00:56.545
Está?

15
00:00:56.545 --> 00:01:02.780
Então, esse é dos motivos pelos
quais a gente fala o TDD,

16
00:01:02.780 --> 00:01:08.135
quando você faz o TDD, a gente deixa
a classe mais desacoplada, porquê?

17
00:01:08.135 --> 00:01:12.757
Esse desacoplamento vem justamente do
facto de a gente criar a nossa classe para

18
00:01:12.757 --> 00:01:16.700
que ela possa, para que as dependências
dela possam ser trocadas pelo

19
00:01:16.700 --> 00:01:20.910
mock e com isso você acaba desacoplando
a classe das suas dependências.

20
00:01:20.910 --> 00:01:21.415
Está?

21
00:01:21.415 --> 00:01:24.275
Dê uma olhada nesse código aqui, não é.

22
00:01:24.275 --> 00:01:29.545
Eu tenho ali método não é,
método adiciona e dentro desse método,

23
00:01:29.545 --> 00:01:34.390
eu crio uma, uma instância da
classe NotificadorEstoque.

24
00:01:34.390 --> 00:01:35.261
Está?
Então,

25
00:01:35.261 --> 00:01:37.943
como é que eu vou substituir
essa dependência?

26
00:01:37.943 --> 00:01:42.180
Como é que eu vou falar assim: Método
cria mock no lugar dessa variável?

27
00:01:42.180 --> 00:01:42.694
Está?

28
00:01:42.694 --> 00:01:43.893
Então, não dá.

29
00:01:43.893 --> 00:01:49.412
Não é todo o tipo de dependência,
na realidade até dá, tem algumas bruxarias

30
00:01:49.412 --> 00:01:54.435
aí e tal, que dá para fazer, mas
realmente é muito, é bem mais complicado.

31
00:01:54.435 --> 00:01:57.375
Não é a ideia ficar utilizando
este tipo de coisas.

32
00:01:57.375 --> 00:02:02.193
A ideia é fazer uma classe que possa
aceitar esse tipo de coisa de uma forma

33
00:02:02.193 --> 00:02:03.940
mais simples, está?

34
00:02:03.940 --> 00:02:09.184
Então, é importante, não é, que as classes

35
00:02:09.184 --> 00:02:15.854
permitam que os Mock Objects possam ser
passados no lugar das dependências,

36
00:02:15.854 --> 00:02:20.400
ou seja, eu tenho que,
de alguma forma externamente à classe

37
00:02:20.400 --> 00:02:25.283
conseguir colocar Mock Object no
lugar daquela dependência, está?

38
00:02:25.283 --> 00:02:29.732
Então, a classe tem que estar lá,
de braços abertos aí não é,

39
00:02:29.732 --> 00:02:34.278
aceitando o mock no lugar da
dependência dela para poder

40
00:02:34.278 --> 00:02:38.140
facilitar o nosso teste de unidade, está?

41
00:02:38.140 --> 00:02:44.608
Uma das formas de fazer isso é você passar
a dependência no construtor da classe.

42
00:02:44.608 --> 00:02:49.297
Então, note nesse código
aqui que temos aqui do lado,

43
00:02:49.297 --> 00:02:54.311
que não mais o NotificadorEstoque,
ele é criado dentro do método,

44
00:02:54.311 --> 00:02:57.277
mas ele é recebido no
construtor da classe.

45
00:02:57.277 --> 00:03:02.929
Dessa forma, eu posso ir lá e passar
o mock no lugar da dependência real.

46
00:03:02.929 --> 00:03:08.258
Uma outra forma de fazer
isso é colocar método set,

47
00:03:08.258 --> 00:03:14.910
onde eu consigo injetar, colocar aquela
dependência dentro da classe, não é.

48
00:03:14.910 --> 00:03:21.836
Se você vai usar o construtor ou o, o set
vai depender também de outras questões,

49
00:03:21.836 --> 00:03:26.940
como eh, aquele, aquela dependência,
ela é obrigatória?

50
00:03:26.940 --> 00:03:29.937
Nesse caso, eu vou usar construtor.

51
00:03:29.937 --> 00:03:31.613
Aquela dependência,

52
00:03:31.613 --> 00:03:36.260
eh, eu preciso definir ela somente
no momento que eu criar a classe?

53
00:03:36.260 --> 00:03:39.830
Eu posso definir outras
partes do ciclo de vida?

54
00:03:39.830 --> 00:03:44.740
Se eu puder definir outros momentos
ou puder alterar o tipo dela, então,

55
00:03:44.740 --> 00:03:48.390
o método set seria mais adequado, está?

56
00:03:48.390 --> 00:03:54.394
Essa questão de configurar externamente o,

57
00:03:54.394 --> 00:03:59.100
a minha dependência é conhecida como

58
00:03:59.100 --> 00:04:04.260
injeção de dependências, que é uma
prática aí bastante conhecida aí.

59
00:04:04.260 --> 00:04:09.189
A gente vai falar sobre isso daí no
curso de Padrões de Projeto, está?

60
00:04:09.189 --> 00:04:13.465
Mas já saiba aí que essa
prática de você injetar não é?

61
00:04:13.465 --> 00:04:18.342
De você colocar a dependência de
uma forma externa, de forma que eh,

62
00:04:18.342 --> 00:04:23.102
você tira a responsabilidade da classe
de criar as suas dependências e

63
00:04:23.102 --> 00:04:28.007
elas passam a ser colocadas externamente,
isso aí é conhecido como Injeção de

64
00:04:28.007 --> 00:04:32.919
Dependências e quando a gente faz o TDD,
a gente usa muito isso daí justamente,

65
00:04:32.919 --> 00:04:38.560
para poder configurar essas dependências
e passar o Mock Object no lugar dela.

66
00:04:38.560 --> 00:04:45.268
Bom, pode ser também que fala
assim: Mas a cada invocação do

67
00:04:45.268 --> 00:04:50.592
método eu posso ter tipo de
NotificadorEstoque diferente, está?

68
00:04:50.592 --> 00:04:56.412
Por isso que eu crio ou eu crio a partir
de parâmetros que eu recebo e tal.

69
00:04:56.412 --> 00:04:59.205
Nesse caso, eh, eu posso, por exemplo,

70
00:04:59.205 --> 00:05:02.172
passar ele como parâmetro do meu método,
está?

71
00:05:02.172 --> 00:05:06.195
Eu posso até, por exemplo,
fazer uma sobrecarga de métodos,

72
00:05:06.195 --> 00:05:10.870
que método recebe como parâmetro
e eu tenho método que não recebe,

73
00:05:10.870 --> 00:05:16.794
que aí ele cria aquela instância e chama
o método passando aquilo como parâmetro.

74
00:05:16.794 --> 00:05:20.812
Então, todos esses artifícios a gente pode
fazer para que a gente consiga eh, eh,

75
00:05:20.812 --> 00:05:26.353
dentro do contexto de teste estar
substituindo aquela dependência, está?

76
00:05:26.353 --> 00:05:30.667
Mas, eh, eh, o que pode acontecer,
você fala assim, okay.

77
00:05:30.667 --> 00:05:34.410
Mas, espera aí, a dependência ali,
o Notificador de Estoque é uma classe.

78
00:05:34.410 --> 00:05:39.690
O Mock Object que você vai passar no
lugar ali, ele é uma outra classe.

79
00:05:39.690 --> 00:05:44.437
Como é que eu faço para poder
colocar a classe do mock no

80
00:05:44.437 --> 00:05:48.290
lugar da minha classe ali da aplicação,
que é a dependência?

81
00:05:48.290 --> 00:05:55.295
Então, eh, por isso a gente tem
que procurar criar a dependência

82
00:05:55.295 --> 00:06:00.300
da nossa classe, não como uma classe
concreta mas como uma abstração,

83
00:06:00.300 --> 00:06:05.110
de forma que a gente possa fazer com que
a nossa dependência implemente aquela

84
00:06:05.110 --> 00:06:09.269
abstração e o mock object também
implemente aquela abstração.

85
00:06:09.269 --> 00:06:14.554
Então, nesse caso, pegando o exemplo aí
do NotificadorEstoque, eu poderia ter,

86
00:06:14.554 --> 00:06:19.586
por exemplo, uma interface Notificador
ou uma classe abstrata ou alguma,

87
00:06:19.586 --> 00:06:24.139
algum tipo de abstração
e ter essa abstração,

88
00:06:24.139 --> 00:06:27.743
ao invés de ter o, a classe concreta ali.

89
00:06:27.743 --> 00:06:30.380
Dessa forma, fica muito mais fácil.

90
00:06:30.380 --> 00:06:35.112
Sendo que o meu mock,
ele só precisa também implementar aquela

91
00:06:35.112 --> 00:06:39.785
mesma abstração e, dessa forma,
eu consigo pegar uma instância do mock e

92
00:06:39.785 --> 00:06:44.264
colocar ali no lugar da dependência
e a classe nem vai ficar

93
00:06:44.264 --> 00:06:49.100
sabendo que o que está ali é o mock
e não a dependência real dela.

94
00:06:49.100 --> 00:06:49.730
Está?

95
00:06:49.730 --> 00:06:54.570
Para a classe,
a presença do mock ali é transparente.

96
00:06:54.570 --> 00:07:00.070
Ela vai lidar com o mock da mesma forma
que ela lida com a dependência real.

97
00:07:00.070 --> 00:07:00.637
Está?

98
00:07:00.637 --> 00:07:05.548
Então, usando essas práticas,
a gente passa a conseguir com

99
00:07:05.548 --> 00:07:10.408
que o teste possa passar o
Mock Object no lugar da dependência.

100
00:07:10.408 --> 00:07:14.517
Ele fala assim: olha classe
aí que eu estou criando,

101
00:07:14.517 --> 00:07:20.040
está aqui o objeto que você vai usar
no lugar da sua dependência, está?

102
00:07:20.040 --> 00:07:23.062
Por acaso,
esse objeto é o mock object, está?

103
00:07:23.062 --> 00:07:27.607
E, para fechar, uma coisa interessante
é que fazendo tudo isso como eu

104
00:07:27.607 --> 00:07:32.522
mencionei antes, você vai estar
desacoplando a sua classe da dependência.

105
00:07:32.522 --> 00:07:37.154
Então, de uma certa forma,
você não está fazendo isso só para teste.

106
00:07:37.154 --> 00:07:41.402
Você não está fazendo isso só para testar,
porque você eh,

107
00:07:41.402 --> 00:07:45.300
desacoplar o Mock Object, eh,

108
00:07:45.300 --> 00:07:50.292
desacoplar a dependência da classe
de forma a conseguir colocar

109
00:07:50.292 --> 00:07:55.214
o Mock Object no lugar dela
também é uma forma que o TDD

110
00:07:55.214 --> 00:07:59.516
te induz a criar design mais
desacoplado entre as classes.

111
00:07:59.516 --> 00:08:01.091
Então, não é só para o teste.

112
00:08:01.091 --> 00:08:03.734
Quando você tiver criando
essas abstrações,

113
00:08:03.734 --> 00:08:07.753
fazendo injeção de dependência e tal,
não pensa: Que droga.

114
00:08:07.753 --> 00:08:11.164
Tenho que fazer isso só por
causa desse maldito teste.

115
00:08:11.164 --> 00:08:11.924
Não é isso.

116
00:08:11.924 --> 00:08:13.216
Você fazendo isso,

117
00:08:13.216 --> 00:08:19.126
você também está criando design melhor e
mais desacoplado para o seu sistema, está?

118
00:08:19.126 --> 00:08:21.205
Então, não é só para o teste.

119
00:08:21.205 --> 00:08:23.523
E é esse dos fatores,

120
00:08:23.523 --> 00:08:29.345
pelos quais o TDD é uma técnica de
desenvolvimento interessante de você usar.

121
00:08:29.345 --> 00:08:34.112
Ele não só pensa a forma sistemática
e segura de você ir progredindo,

122
00:08:34.112 --> 00:08:38.770
mas ele também te ajuda a desacoplar
as classes do seu sistema.

123
00:08:38.770 --> 00:08:39.436
Certo?

124
00:08:39.436 --> 00:08:44.110
Então, com isso eu espero que
eu tenha conseguido mostrar

125
00:08:44.110 --> 00:08:49.194
como fazer a sua classe, a classe que você

126
00:08:49.194 --> 00:08:54.274
está criando numa sessão de TDD,
aceitar Mock Objects para

127
00:08:54.274 --> 00:08:59.230
que você possa fazer o teste e substituir
as suas dependências por eles.

128
00:08:59.230 --> 00:08:59.752
Certo?

129
00:08:59.752 --> 00:09:00.871
Muito obrigado.

130
00:09:00.871 --> 00:09:04.910
Na próxima aula, vamos falar
pouquinho sobre os Mock Objects

131
00:09:06.803 --> 00:09:10.590
si.
WEBVTT

1
00:00:00.000 --> 00:00:07.868
[MÚSICA] [MÚSICA]

2
00:00:07.868 --> 00:00:13.866
Chegamos então na terceira parte aqui do
nosso hands on para desenvolver uma pilha.

3
00:00:13.866 --> 00:00:18.607
A gente já tem três testes
aqui: a pilha vazia, empilhar

4
00:00:18.607 --> 00:00:23.424
elemento e empilhar e
desempilhar elementos.

5
00:00:23.424 --> 00:00:28.279
Agora vamos ver aqui como que a gente
trata aí a pilha cheia e quando

6
00:00:28.279 --> 00:00:32.527
eu tento colocar alguma coisa
numa pilha que já está cheia ou

7
00:00:32.527 --> 00:00:36.820
quando eu tento remover alguma coisa
de uma pilha que está vazia, está?

8
00:00:36.820 --> 00:00:41.088
É.
bom, o que é que eu vou fazer aqui?

9
00:00:41.088 --> 00:00:45.900
Eu vou eh, a primeira coisa que eu
vou querer fazer vai ser refaturar

10
00:00:45.900 --> 00:00:48.940
para adicionar aqui o método before.

11
00:00:48.940 --> 00:00:53.656
A gente no curso aí de Orientação
a Objeto, a gente viu aí,

12
00:00:53.656 --> 00:00:56.057
o método before do JUnit.

13
00:00:56.057 --> 00:01:01.218
Então, eu vou dar uma refaturada
nos meus testes que eu

14
00:01:01.218 --> 00:01:06.510
vou chamar aqui, opa, de inicializaPilha.

15
00:01:06.510 --> 00:01:12.670
É, então,

16
00:01:12.670 --> 00:01:16.670
eu vou vir aqui,
vou importar o before do Junit,

17
00:01:16.670 --> 00:01:22.240
eu vou copiar, eh,

18
00:01:22.240 --> 00:01:30.171
a pilha aqui para a minha
classe e vou colocar.

19
00:01:30.171 --> 00:01:33.817
Então, assim,
reparem que a cada teste não é,

20
00:01:33.817 --> 00:01:38.514
ele vai executar o before e
vai criar uma nova instância,

21
00:01:38.514 --> 00:01:42.100
uma instância zerada ali de pilha, está?

22
00:01:42.100 --> 00:01:43.770
O que eu quero aqui?

23
00:01:43.770 --> 00:01:48.048
Eu quero poder passar o tamanho
da pilha no construtor.

24
00:01:48.048 --> 00:01:52.059
Então, eu, por exemplo,
colocaria ali 10, não é?

25
00:01:52.059 --> 00:01:57.236
Então, note que eu sempre mudo o
teste antes de mudar a classe, está?

26
00:01:57.236 --> 00:02:03.064
Então, eu vou vir aqui,
vou criar esse construtor e eh,

27
00:02:03.064 --> 00:02:06.689
vou inicializar não é,

28
00:02:06.689 --> 00:02:12.680
o array aqui nesse construtor, está?

29
00:02:12.680 --> 00:02:17.993
E aqui, obviamente vai receber o,
vou chamar o parâmetro aqui

30
00:02:17.993 --> 00:02:23.730
de máximo e eu vou passar aqui o máximo
como parâmetro ali para o array.

31
00:02:23.730 --> 00:02:27.498
Aqui, eu posso tirar isso.

32
00:02:27.498 --> 00:02:33.319
Bom, será que, bom,
agora eu preciso tirar aqui do,

33
00:02:33.319 --> 00:02:36.380
as pilhas aqui do teste, não é?

34
00:02:36.380 --> 00:02:40.751
E aí, eu vou rodar aqui para
ver se o meu teste continua

35
00:02:40.751 --> 00:02:44.360
funcionando depois dessa mudança aqui.

36
00:02:44.360 --> 00:02:51.943
Okay, funcionou, eu posso seguir frente.

37
00:02:51.943 --> 00:02:57.321
Eu vou eh,
criar mais teste que eu vou chamar

38
00:02:57.321 --> 00:03:03.170
de eh, removeDaPilhaVazia,

39
00:03:03.170 --> 00:03:07.605
está?

40
00:03:07.605 --> 00:03:12.040
Então, aqui eu simplesmente vou
vir e vou chamar desempilha,

41
00:03:12.040 --> 00:03:15.402
aqui, está?

42
00:03:15.402 --> 00:03:19.137
E aí, o o que é que vai acontecer?

43
00:03:19.137 --> 00:03:23.246
Eu vou criar,
vou vir aqui no meu teste eh,

44
00:03:23.246 --> 00:03:30.920
e vou dizer que o expected

45
00:03:30.920 --> 00:03:35.900
é Pilha

46
00:03:35.900 --> 00:03:42.690
VaziaException.

47
00:03:42.690 --> 00:03:48.631
Vou dizer que eu espero que aconteça
uma pilhaVaziaException, está?

48
00:03:48.631 --> 00:03:50.891
Essa, essa classe não existe.

49
00:03:50.891 --> 00:03:55.881
Então, eu vou vir aqui pedir para criar
a classe, eu vou criar a princípio,

50
00:03:55.881 --> 00:04:01.081
como uma Run Time Exception, porque eu
não quero que o pessoal precise ficar

51
00:04:01.081 --> 00:04:06.050
verificando isso toda a vez que
vai desempilhar alguma coisa.

52
00:04:06.050 --> 00:04:12.939
Então, eu vou vir aqui,
vou dar o finish está, vou salvar.

53
00:04:12.939 --> 00:04:17.020
Eu tenho que criar,
pelo menos, construtor.

54
00:04:17.020 --> 00:04:20.720
O que é que ele tá reclamando aqui?

55
00:04:20.720 --> 00:04:27.253
Eh, ele está dizendo que tem

56
00:04:27.253 --> 00:04:32.338
construtor que eu tenho que criar eh,

57
00:04:32.338 --> 00:04:38.490
eu vou criar aqui então, public.

58
00:04:38.490 --> 00:04:42.237
Deixa eu salvar aqui para
ver se o eclipse me ajuda e

59
00:04:42.237 --> 00:04:45.190
cria para mim esse construtor aqui.

60
00:04:45.190 --> 00:04:47.380
Não, não tá querendo criar.

61
00:04:47.380 --> 00:04:49.658
Vou ter que criar na mão mesmo.

62
00:04:49.658 --> 00:04:56.232
Vamos lá, public PilhaVaziaException eh,

63
00:04:56.232 --> 00:05:00.107
vamos passar aqui uma mensagem e aí,

64
00:05:00.107 --> 00:05:05.126
eu vou chamar aqui, simplesmente,
o super com essa mensagem, não é?

65
00:05:05.126 --> 00:05:10.971
Eu tenho Runtime exception e tem essa.

66
00:05:10.971 --> 00:05:15.350
Está, ele está só Runtime,
por isso que está,

67
00:05:15.350 --> 00:05:19.420
por isso o problema.

68
00:05:19.420 --> 00:05:20.659
Está, agora foi.

69
00:05:20.659 --> 00:05:24.303
Por isso é que o Eclipse não
estava me ajudando, não é,

70
00:05:24.303 --> 00:05:28.110
não boto o nome da classe
certa o que é que eu quero?

71
00:05:28.110 --> 00:05:31.951
Então, agora o meu teste
aqui tá compilando está,

72
00:05:31.951 --> 00:05:37.060
porque ele reconhece só que eu vou rodar
ele e ele não está, não é, ele tá dando

73
00:05:37.060 --> 00:05:43.130
uma array out of bounds exception,
mas não é a minha Pilha Vazia Exception.

74
00:05:43.130 --> 00:05:45.886
Então, eu vou ver aqui na Pilha.

75
00:05:45.886 --> 00:05:50.030
Isso aqui acontece no método desempilha,
não é?

76
00:05:50.030 --> 00:05:55.753
Então, eu vou verificar não é,
se a quantidade nem preciso não é?

77
00:05:55.753 --> 00:06:01.020
Se a pilha está vazia,
eu tenho método que verifica isso,

78
00:06:01.020 --> 00:06:05.290
se está vazia: throw new

79
00:06:05.290 --> 00:06:13.764
PilhaVaziaException, eh,

80
00:06:13.764 --> 00:06:19.250
aí vou colocar aqui "Não

81
00:06:19.250 --> 00:06:23.990
é possível desempilhar".

82
00:06:23.990 --> 00:06:27.070
Muito bom.

83
00:06:27.070 --> 00:06:32.697
Eh, vamos, vamos rodar aqui e
ver se agora, agora funcionou.

84
00:06:32.697 --> 00:06:34.650
Muito bem, muito bom.

85
00:06:34.650 --> 00:06:37.934
Está então,
isso aqui a gente vê exemplo não é,

86
00:06:37.934 --> 00:06:42.970
como é que a gente pode também criar
testes para a situação de erro, está?

87
00:06:42.970 --> 00:06:49.819
Eu vou criar outro teste
aqui que vai ser o meu,

88
00:06:49.819 --> 00:06:59.381
eh, Pilha CheiaException, está?

89
00:06:59.381 --> 00:07:05.736
Eh, então, eu vou chamar esse teste de eh,

90
00:07:05.736 --> 00:07:11.089
adicionaNaPilha Cheia.

91
00:07:11.089 --> 00:07:14.716
Então, o que é que ele vai fazer?

92
00:07:14.716 --> 00:07:18.691
No caso aqui, a minha pilha não é,
toda que eu estou criando aqui ela,

93
00:07:18.691 --> 00:07:20.519
ela é de tamanho 10.

94
00:07:20.519 --> 00:07:27.416
Então, eu vou fazer for aqui Vamos lá: for

95
00:07:27.416 --> 00:07:32.158
int i igual a 0, opa,

96
00:07:32.158 --> 00:07:37.625
e menor do que 10 i mais, mais, está?

97
00:07:37.625 --> 00:07:40.040
Aqui, eu vou empilhar.

98
00:07:40.040 --> 00:07:44.170
Eh, então eu vou chamar aqui de p.empilha,

99
00:07:44.170 --> 00:07:48.499
vou chamar aqui de

100
00:07:48.499 --> 00:07:54.260
elemento e vou somar o i ali.

101
00:07:54.260 --> 00:07:59.595
E aqui não é,
ali eu estou colocando dez elementos,

102
00:07:59.595 --> 00:08:02.400
a princípio é pra funcionar, não é?

103
00:08:02.400 --> 00:08:07.561
Aqui, eu vou chamar p.empilha e vou passar

104
00:08:07.561 --> 00:08:12.730
aqui como parâmetro boom não é,
que é para a pilha estourar.

105
00:08:12.730 --> 00:08:16.525
Então, ele vai dar o erro aqui no boom.

106
00:08:16.525 --> 00:08:20.972
Então, eu vou salvar, vou vir

107
00:08:20.972 --> 00:08:26.377
aqui e vou pedir ajuda pro
Eclipse para criar essa classe.

108
00:08:26.377 --> 00:08:30.605
Vamos ver se agora eu coloco aqui
a superclasse direito não é,

109
00:08:30.605 --> 00:08:33.289
que eu quero é o Runtime Exception.

110
00:08:33.289 --> 00:08:36.623
Aqui não é só, não é o Runtime, está?

111
00:08:36.623 --> 00:08:44.150
Já vou marcar aqui os construtores da
superclasse e ele criou monte aqui.

112
00:08:44.150 --> 00:08:50.880
Para mim, interessa só esse aqui,
que ele passa a mensagem.

113
00:08:50.880 --> 00:08:55.410
O resto aqui eu vou apagar.

114
00:08:55.410 --> 00:08:58.788
Então, eu salvo agora o meu,

115
00:08:58.788 --> 00:09:03.873
meu teste ele já está, eh,
já está compilando não é?

116
00:09:03.873 --> 00:09:06.495
Eu posso rodar e ver ele falhar.

117
00:09:06.495 --> 00:09:10.934
Também ele dá array index out of bounds
exception, que não é o que eu quero.

118
00:09:10.934 --> 00:09:14.033
Eu quero uma Pilha Cheia Exception.

119
00:09:14.033 --> 00:09:19.695
Então, eu vou vir aqui não
é e vou no método empilha,

120
00:09:19.695 --> 00:09:22.490
eu vou verificar não é?

121
00:09:22.490 --> 00:09:28.658
Se a quantidade foi
igual ao tamanho máximo.

122
00:09:28.658 --> 00:09:30.517
Como é que eu sei o tamanho máximo?

123
00:09:30.517 --> 00:09:33.800
Acho que eu posso pegar o tamanho
ali do array elemento não é?

124
00:09:33.800 --> 00:09:38.420
Ponto length.

125
00:09:38.420 --> 00:09:44.394
Então, ele vai eh,

126
00:09:44.394 --> 00:09:49.283
eh, jogar não é throw

127
00:09:49.283 --> 00:09:54.756
new Pilha CheiaException.

128
00:09:54.756 --> 00:10:03.120
A mensagem ali "Não é possível
empilhar mais elementos".

129
00:10:03.120 --> 00:10:05.135
Muito bom!

130
00:10:05.135 --> 00:10:12.150
Eu vou salvar aqui e vou executar.

131
00:10:12.150 --> 00:10:13.624
Olha que beleza!

132
00:10:13.624 --> 00:10:16.480
Tá aí a minha pilha implementada.

133
00:10:16.480 --> 00:10:17.340
Tá.

134
00:10:17.340 --> 00:10:22.085
Antes de terminar essa
aula eu queria chamar

135
00:10:22.085 --> 00:10:24.650
a atenção de vocês para pequeno detalhe.

136
00:10:24.650 --> 00:10:29.414
Tá, esse pequeno detalhe é o
seguinte: esse teste aqui,

137
00:10:29.414 --> 00:10:33.827
adicionaNaPilhaCheia, ele não é bom teste.

138
00:10:33.827 --> 00:10:38.480
Como que a gente sabe
que ele não é bom teste?

139
00:10:38.480 --> 00:10:41.628
Porque eu posso de repente introduzir

140
00:10:41.628 --> 00:10:46.632
defeito na minha classe e esse
teste não vai pegar esse defeito.

141
00:10:46.632 --> 00:10:47.650
Tá?
Então,

142
00:10:47.650 --> 00:10:51.810
pense aí: Que problema é esse nesse teste?

143
00:10:51.810 --> 00:10:55.945
O problema desse

144
00:10:55.945 --> 00:11:01.158
teste é que o erro,
esse PilhaCheiaException,

145
00:11:01.158 --> 00:11:05.400
ele deveria tá verificando se
esse erro acontece no "boom".

146
00:11:05.400 --> 00:11:10.699
E se esse erro acontecer qualquer outro
"empilha" dentro desse loop aqui, o teste,

147
00:11:10.699 --> 00:11:14.876
ele vai dar como se o comportamento
estivesse correto, e não está.

148
00:11:14.876 --> 00:11:16.975
Como que a gente verifica isso?

149
00:11:16.975 --> 00:11:22.848
A gente pode inserir bug aqui no software,
né, por exemplo,

150
00:11:22.848 --> 00:11:27.944
ó: Eu quero que ele dê problema aqui, ó,

151
00:11:27.944 --> 00:11:33.258
sei lá, -3 aqui no tamanho, né,
ele vai dar o problema muito

152
00:11:33.258 --> 00:11:38.638
antes; ele vai jogar a exceção muito antes
de a pilha realmente estar cheia, né.

153
00:11:38.638 --> 00:11:41.461
E se eu rodar o meu teste ele vai passar.

154
00:11:41.461 --> 00:11:45.460
Tá, ou seja,
o meu teste não tá pegando esse bug.

155
00:11:45.460 --> 00:11:47.396
Que que eu tenho que fazer aqui?

156
00:11:47.396 --> 00:11:48.830
Ao invés de usar o...

157
00:11:48.830 --> 00:11:49.692
quando...

158
00:11:49.692 --> 00:11:52.917
no caso de cima,
eu só tenho uma linha de código, né?

159
00:11:52.917 --> 00:11:55.285
É o único lugar que pode dar o problema.

160
00:11:55.285 --> 00:11:57.826
Então não tem problema eu usar o expected.

161
00:11:57.826 --> 00:12:01.848
Quando eu tenho lugar específico
que pode dar o problema, tá,

162
00:12:01.848 --> 00:12:05.521
o ideal é eu fazer aquele try/catch, né.

163
00:12:05.521 --> 00:12:11.890
Eu vou vir aqui, ó, é,
vou dar "Surround with",

164
00:12:11.890 --> 00:12:18.829
"Try/catch block", aqui,

165
00:12:18.829 --> 00:12:24.200
depois do try, eu vou colocar "fail()",

166
00:12:24.200 --> 00:12:28.214
né, ou seja, se ele não deu a exceção,

167
00:12:28.214 --> 00:12:33.740
ele vai dar o problema e é...

168
00:12:33.740 --> 00:12:38.110
Aqui, ó,
eu vou verificar se ele dá o Pilha...

169
00:12:38.110 --> 00:12:42.214
...CheiaException.

170
00:12:42.214 --> 00:12:43.520
Certo?

171
00:12:43.520 --> 00:12:47.150
Então, vamos ver aqui, ó,

172
00:12:47.150 --> 00:12:51.620
eu gosto de chamar essa
construção aqui de "try/fail".

173
00:12:51.620 --> 00:12:55.777
É quando você verifica
a exceção dentro do "try".

174
00:12:55.777 --> 00:12:59.691
Vamos rodar agora, ó,
agora ele tá pegando, ó.

175
00:12:59.691 --> 00:13:03.957
Ele tá dando PilhaCheiaException,
se eu clicar aqui, ó,

176
00:13:03.957 --> 00:13:07.737
ele tá dando PilhaCheiaException
aqui no meu "empilha",

177
00:13:07.737 --> 00:13:12.714
tá, o que não é o comportamento que eu
quero, não é o comportamento esperado, tá.

178
00:13:12.714 --> 00:13:17.322
Então eu vou vir aqui, ó, vou corrigir
aqui o código e vou mostrar aqui que com o

179
00:13:17.322 --> 00:13:21.660
código correto, e somente com ele correto,
o teste vai funcionar.

180
00:13:23.944 --> 00:13:29.660
Agora sim!

181
00:13:29.660 --> 00:13:34.284
Então com isso a gente termina esse
hands-on da pilha e eu queria deixar, né,

182
00:13:34.284 --> 00:13:37.962
com essa última questão aí,
essa lição de que não basta, né,

183
00:13:37.962 --> 00:13:40.990
a gente criar o teste e
a classe passar no teste.

184
00:13:40.990 --> 00:13:46.160
O teste tem que realmente tá verificando o
comportamento que a gente quer pra classe.

185
00:13:46.160 --> 00:13:46.823
Certo?

186
00:13:46.823 --> 00:13:50.614
Muito obrigado,
espero que com essa prática,

187
00:13:50.614 --> 00:13:56.083
com esse hands-on tenha ficado mais
claro como que funciona o TDD.

188
00:13:56.083 --> 00:13:56.948
Se a...

189
00:13:56.948 --> 00:14:01.814
Eu sei que é difícil no começo,
que você ainda tá começando, mas teremos

190
00:14:01.814 --> 00:14:06.837
outros hands-on onde vamos explorar
ainda mais esses conceitos do TDD.

191
00:14:06.837 --> 00:14:09.870
Muito obrigado, até a próxima aula.

192
00:14:09.870 --> 00:14:14.890
[MÚSICA]
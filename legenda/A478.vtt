WEBVTT

1
00:00:00.000 --> 00:00:08.083
[MÚSICA] Olá!

2
00:00:08.083 --> 00:00:15.190
Bem vindo ao curso de Orientação a Objetos
com Java, meu nome é Clovis Fernandes.

3
00:00:15.190 --> 00:00:20.810
Hoje iremos tratar de diagramas
de classes no contexto da UML.

4
00:00:20.810 --> 00:00:26.006
Nesta primeira parte iremos ver
alguns conceitos iniciais tais como

5
00:00:26.006 --> 00:00:32.047
a própria classe, como se representam
atributos e responsabilidades

6
00:00:32.047 --> 00:00:36.200
forma de diagramas,
vamos falar de associação

7
00:00:36.200 --> 00:00:40.560
entre uma classe e outra e os conceitos
que estão envolvidos com associação.

8
00:00:40.560 --> 00:00:47.711
Já a parte de multiplicidade e
navegabilidade diante e agregação,

9
00:00:47.711 --> 00:00:52.620
composição e herança,
iremos falar disso tudo na parte 2.

10
00:00:52.620 --> 00:00:57.987
O diagrama de classes,
ele é uma ferramenta muito importante

11
00:00:57.987 --> 00:01:04.330
para registrar todas as classes de
sistema que está sendo desenvolvido.

12
00:01:04.330 --> 00:01:09.351
Ele ajuda a mostrar todos os
relacionamentos entre as classes

13
00:01:09.351 --> 00:01:14.020
e ajuda a raciocinar, a pensar
sobre o que é que estamos fazendo,

14
00:01:14.020 --> 00:01:18.507
se estamos fazendo bem certo,
ou se podemos melhorar a nossa

15
00:01:18.507 --> 00:01:22.780
estrutura de classes que
nós estamos desenvolvendo.

16
00:01:22.780 --> 00:01:28.230
Então o primeiro passo é
trabalhar com modelagem CRC,

17
00:01:28.230 --> 00:01:33.335
trabalhamos com cartões CRC,
depois começamos a desenvolver os

18
00:01:33.335 --> 00:01:39.036
nossos programas numa linguagem de
programação e para ajudar a organizar

19
00:01:39.036 --> 00:01:44.271
isso muitos momentos estaremos
construindo diagramas de classes.

20
00:01:44.271 --> 00:01:47.680
Para isso vai ser importante
revisitar esse assunto.

21
00:01:47.680 --> 00:01:51.835
Muitos de vocês já devem ter
trabalhado com diagramas de classes,

22
00:01:51.835 --> 00:01:56.840
obviamente, iremos aqui então
revisitar esse assunto para

23
00:01:56.840 --> 00:02:02.000
consolidar o conhecimento
de vocês no assunto.

24
00:02:02.000 --> 00:02:07.381
Mais tarde outros momentos,
deste curso e dos próximos cursos

25
00:02:07.381 --> 00:02:13.801
iremos sempre apresentar os nossos
conceitos com base diagramas da UML,

26
00:02:13.801 --> 00:02:19.447
ou diagramas de classe ou diagramas
de sequência, e outros diagramas.

27
00:02:19.447 --> 00:02:24.726
Para exemplificar apresento de
cara diagrama de classes de uma

28
00:02:24.726 --> 00:02:30.190
aplicação que envolve pedidos
de compra de alguma coisa.

29
00:02:30.190 --> 00:02:34.720
Então estão envolvidos classes cliente,
que faz pedidos,

30
00:02:34.720 --> 00:02:39.760
os pedidos estão organizados
na forma de linhas,

31
00:02:39.760 --> 00:02:43.848
de items de produto, fazendo uso da classe

32
00:02:43.848 --> 00:02:49.197
detalhePedido e por sua vez tem
os items de produto associados.

33
00:02:49.197 --> 00:02:54.062
O pagamento também está associado a
pedido, porque todo o pedido algum momento

34
00:02:54.062 --> 00:02:59.691
vai ser pago e esse pedido vai ser
pago através de cartão de crédito,

35
00:02:59.691 --> 00:03:04.849
ou dinheiro, ou cheque e ao
longo dessas duas partes nós

36
00:03:04.849 --> 00:03:11.151
iremos mostrar os vários conceitos que
estão aí representados nesse diagrama.

37
00:03:11.151 --> 00:03:16.637
Ele vai ser muito usado, a maioria das
nossas explicações vão girar torno

38
00:03:16.637 --> 00:03:22.658
desse diagrama, ou outro assunto que eu
complemento com algum diagrama adicional.

39
00:03:22.658 --> 00:03:26.154
Vamos começar então a mostrar
como é que é uma classe,

40
00:03:26.154 --> 00:03:29.745
como é que uma classe fica
representada num diagrama UML.

41
00:03:29.745 --> 00:03:35.604
Tem 3 partes: o nome,
os atributos e as operações ou métodos.

42
00:03:35.604 --> 00:03:40.064
Eu estou mostrando para vocês a classe de
Pedidos relacionada com a DetalhePedido e

43
00:03:40.064 --> 00:03:40.970
a de Pagamento.

44
00:03:40.970 --> 00:03:44.618
O relacionamento entre as
classes é que é importante.

45
00:03:44.618 --> 00:03:49.899
A representação anterior eu mostrei
para vocês apenas e tão somente

46
00:03:49.899 --> 00:03:56.230
2 atributos na classe Pedido
e 3 métodos na classe Pedido.

47
00:03:56.230 --> 00:04:01.004
Aqui vocês estão vendo,
nós estamos com mais informação.

48
00:04:01.004 --> 00:04:01.720
Porquê?

49
00:04:01.720 --> 00:04:04.736
Existem algumas informações
que são implícitas,

50
00:04:04.736 --> 00:04:09.196
então o relacionamento da classe
Pedido com DetalhePedido fica

51
00:04:09.196 --> 00:04:14.184
implícito estruturas de dados que
relacionam DetalhePedido e aí a gente

52
00:04:14.184 --> 00:04:18.508
está chamando essa estrutura de
dados item de linha, de cada pedido.

53
00:04:18.508 --> 00:04:23.574
Vai ter várias linhas com os seus pedidos,
esse seria item de linha Temos

54
00:04:23.574 --> 00:04:29.340
também na classe Pagamento que a classe
Pedido ela se refere a pagamento.

55
00:04:29.340 --> 00:04:35.759
Então tem atributo implícito
que eu estou explicitando,

56
00:04:35.759 --> 00:04:41.863
não é, esses 2 atributos,
agora nesse momento que é o Pagamento.

57
00:04:41.863 --> 00:04:46.522
Uma classe ela pode estar representada
num diagrama de classes e eu não

58
00:04:46.522 --> 00:04:49.010
preciso apresentar todas as informações,

59
00:04:49.010 --> 00:04:53.424
porque existe esse relacionamento
com as outras classes.

60
00:04:53.424 --> 00:04:57.280
Aulas futuras nós iremos trabalhar isso,

61
00:04:57.280 --> 00:05:01.350
a gente chama isso de
arquitetura do código.

62
00:05:01.350 --> 00:05:06.572
Essa arquitetura fica uma arquitetura
implícita, eu não preciso ficar mostrando.

63
00:05:06.572 --> 00:05:11.470
Ao mesmo tempo, ela me ajuda
a codificar porque essa arquitetura

64
00:05:11.470 --> 00:05:13.840
tem certo formato padrão.

65
00:05:13.840 --> 00:05:16.328
Nós veremos isso mais para a frente,

66
00:05:16.328 --> 00:05:19.870
agora estamos olhando apenas
a parte de diagramas.

67
00:05:19.870 --> 00:05:24.120
Nós temos o nome da classe e logo
abaixo nós temos os atributos.

68
00:05:24.120 --> 00:05:28.390
Então aí no caso,
nós temos atributo, data,

69
00:05:28.390 --> 00:05:33.323
cujo valor vai ser dado por objeto da

70
00:05:33.323 --> 00:05:38.160
classe Date do Java, por exemplo,
no nosso exemplo aqui.

71
00:05:38.160 --> 00:05:43.031
Temos também o atributo status,
cujo valor vai ser

72
00:05:43.031 --> 00:05:47.758
inteiro por isso nós estamos
rotulando ele como int.

73
00:05:47.758 --> 00:05:51.650
Já o item de linha,
ele vai ser detalhe de pedido,

74
00:05:51.650 --> 00:05:55.390
ele vai ser conjunto de
objetos de detalhe de pedido.

75
00:05:55.390 --> 00:06:04.025
O atributo linhaPedido representa
objetos de DetalhePedido,

76
00:06:04.025 --> 00:06:09.328
eu posso representar de 0
ou mais linhas de pedido.

77
00:06:09.328 --> 00:06:16.367
Isso fica representado pelo 0..* Eu
estou querendo dizer é exatamente isso,

78
00:06:16.367 --> 00:06:20.848
que eu posso ter mais número
indeterminado, não é,

79
00:06:20.848 --> 00:06:26.593
inclusive nada não é, de detalhes de
pedido, objetos detalhes de pedido.

80
00:06:26.593 --> 00:06:32.408
Já do pagamento, vai conter objetos
do tipo, ou da classe pagamento,

81
00:06:32.408 --> 00:06:39.054
então ele vai ser ou mais
objetos da classe Pagamento.

82
00:06:39.054 --> 00:06:43.398
Vai ser 1 se o pagamento for
1 pagamento apenas,

83
00:06:43.398 --> 00:06:47.403
agora se você parcelar esse pagamento,

84
00:06:47.403 --> 00:06:51.712
vai ser ou mais até ao limite
do parcelamento que você deu.

85
00:06:51.712 --> 00:06:57.018
Acabamos de falar sobre os atributos mas
eu queria ressaltar que os atributos

86
00:06:57.018 --> 00:07:02.640
linhaPedido e pagamento,
como eles são relacionados,

87
00:07:02.640 --> 00:07:09.330
ou seja são colaborações dos
objetos detalhePedido e pagamento,

88
00:07:09.330 --> 00:07:14.600
a gente também costuma chamar esses
atributos de relacionamentos.

89
00:07:14.600 --> 00:07:21.319
Os anteriores são atributos que
faz uso ou de valores de dados,

90
00:07:21.319 --> 00:07:26.300
como int, double, string,
ou usam classes que

91
00:07:26.300 --> 00:07:31.210
são próprias do Java como o Date,
por exemplo.

92
00:07:31.210 --> 00:07:36.846
Já os 2 atributos com
relacionamentos são relacionamentos

93
00:07:36.846 --> 00:07:43.100
de objetos de classes da nossa aplicação,
por isso a gente chama de relacionamentos.

94
00:07:43.100 --> 00:07:47.630
Então nós temos o nome da classe,
os atributos

95
00:07:47.630 --> 00:07:52.492
e agora eu vou mostrar para vocês as
responsabilidades, operações ou métodos.

96
00:07:52.492 --> 00:07:57.267
Como é usual Java, iremos chamar as
operações ou responsabilidades nesse

97
00:07:57.267 --> 00:07:58.603
momento de métodos.

98
00:07:58.603 --> 00:08:03.660
Quando estivermos tratando da
parte de design, ou princípios,

99
00:08:03.660 --> 00:08:07.484
muitas vezes voltaremos
a falar responsabilidade.

100
00:08:07.484 --> 00:08:14.173
Normalmente os atributos, porque é que
a gente separou atributos dos métodos?

101
00:08:14.173 --> 00:08:17.965
Princípio, todos os
atributos vão ser privados,

102
00:08:17.965 --> 00:08:22.950
ou seja quando eu criar objeto dessa
classe por exemplo, as variáveis de

103
00:08:22.950 --> 00:08:27.732
instância vão ser inicializadas
para esses valores e exteriormente,

104
00:08:27.732 --> 00:08:31.748
de forma externa ao objeto,
ninguém vai poder acessar isso,

105
00:08:31.748 --> 00:08:37.398
a não ser através de operações ou métodos
que nós vamos descrever logo a seguir.

106
00:08:37.398 --> 00:08:42.649
Então, princípio,
nós não iremos ter atributos

107
00:08:42.649 --> 00:08:48.568
que não sejam privados, sempre vai
ser privado, por definição, está ok?

108
00:08:48.568 --> 00:08:51.015
Por definição vai ser privado.

109
00:08:51.015 --> 00:08:55.910
Nós vamos fornecer meios de
quem necessitar desses valores

110
00:08:55.910 --> 00:08:58.048
poder usar, está ok?

111
00:08:58.048 --> 00:09:03.189
Já as responsabilidades nós temos
3 tipos de responsabilidades,

112
00:09:03.189 --> 00:09:05.740
com relação à visibilidade, ou seja,

113
00:09:05.740 --> 00:09:10.472
quem vai enxergar do lado de
fora objeto dessa classe,

114
00:09:10.472 --> 00:09:15.550
se for privado não tem acesso, então
os dados, os atributos não tem acesso.

115
00:09:15.550 --> 00:09:21.005
Os métodos que também forem privados,
que estão representados com menos antes,

116
00:09:21.005 --> 00:09:24.959
também ninguém vai ter acesso, só
internamente na classe que vai poder usar

117
00:09:24.959 --> 00:09:28.333
esse método como por
exemplo o getAliquota.

118
00:09:28.333 --> 00:09:33.148
Já os métodos getter e setter, são métodos

119
00:09:33.148 --> 00:09:38.070
de acesso aos atributos,
falamos que os atributos são privados,

120
00:09:38.070 --> 00:09:43.334
então a gente coloca métodos para
acessar esses atributos não só

121
00:09:43.334 --> 00:09:48.350
objetos dessa classe mas objetos
de subclasses dessa classe.

122
00:09:48.350 --> 00:09:52.331
Por isso que os getter e
setter por definição também,

123
00:09:52.331 --> 00:09:56.310
uma convenção Eles são protegidos,

124
00:09:56.310 --> 00:10:01.092
esse jogo da velha significa que a classe

125
00:10:01.092 --> 00:10:06.064
pode usar internamente,
ninguém de fora pode usar esses métodos.

126
00:10:06.064 --> 00:10:11.151
Mais para a frente, nós veremos que de
acordo com o projeto pode ser que alguns

127
00:10:11.151 --> 00:10:18.230
desses métodos de acesso, getter e setter,
sejam públicos por necessidade do projeto,

128
00:10:18.230 --> 00:10:22.604
mas por definição também eles
ficariam como protegido.

129
00:10:22.604 --> 00:10:27.702
E nós temos 3 métodos chamados de
públicos, que estão representados pelo

130
00:10:27.702 --> 00:10:34.005
"mais", no qual a visibilidade de
objetos dessa classe vão permitir

131
00:10:34.005 --> 00:10:39.067
que outros objetos possam
referenciar esses métodos,

132
00:10:39.067 --> 00:10:44.345
mandar mensagens para objetos
dessa classe usando esses métodos.

133
00:10:44.345 --> 00:10:47.573
Essa questão da visibilidade é isso,

134
00:10:47.573 --> 00:10:53.812
é para organizar quem pode
acessar o quê no meu objeto.

135
00:10:53.812 --> 00:10:59.315
A gente chama isso de ocultação
da informação, a gente só

136
00:10:59.315 --> 00:11:05.203
coloca na interface da classe ou do objeto
aquilo que a gente quer que seja visto.

137
00:11:05.203 --> 00:11:11.049
Aquilo que a gente quer esconder a gente
coloca como privado ou protegido.

138
00:11:11.049 --> 00:11:14.303
Nem sempre eu preciso representar uma

139
00:11:14.303 --> 00:11:18.555
classe usando todas as informações
que uma classe deve ter.

140
00:11:18.555 --> 00:11:22.450
O mínimo é o nome da classe,
isso a gente tem que colocar.

141
00:11:22.450 --> 00:11:26.822
Mas eu posso às vezes
representar apenas o nome,

142
00:11:26.822 --> 00:11:30.897
eu posso representar usando
o nome e alguns atributos,

143
00:11:30.897 --> 00:11:35.050
se naquele momento eu estou
querendo enfatizar esses atributos,

144
00:11:35.050 --> 00:11:40.298
e posso também usar o nome,
não colocar atributo nenhum e colocar

145
00:11:40.298 --> 00:11:44.960
alguns dos métodos públicos
ou os métodos públicos.

146
00:11:44.960 --> 00:11:49.290
Não preciso representar os
métodos privados ou protegidos,

147
00:11:49.290 --> 00:11:53.887
posso deixar isso de lado,
porque muitas vezes as

148
00:11:53.887 --> 00:11:58.658
classes têm número muito grande
de atributos e de métodos e

149
00:11:58.658 --> 00:12:03.533
isso torna a classe muito cheia,
muito carregada visualmente.

150
00:12:03.533 --> 00:12:06.754
Isso dificulta na hora
de fazer uma análise.

151
00:12:06.754 --> 00:12:12.240
Dependendo da hora, da situação, eu vou
usar uma forma de representar ou outra.

152
00:12:12.240 --> 00:12:16.256
Se vocês lembram quando eu
mostrei a modelagem CRC,

153
00:12:16.256 --> 00:12:20.943
eu representei as dependências
entre as classes usando apenas os

154
00:12:20.943 --> 00:12:25.844
nomes das classes, e é isso que nós
iremos fazer algumas vezes também.

155
00:12:25.844 --> 00:12:30.549
Quais são os relacionamentos entre
classes que iremos apresentar ou

156
00:12:30.549 --> 00:12:34.105
revisitar ao apresentar
diagramas de classes?

157
00:12:34.105 --> 00:12:37.311
São as associações,
agregação e composição,

158
00:12:37.311 --> 00:12:41.807
que são 2 tipos de associação,
herança e dependência.

159
00:12:41.807 --> 00:12:46.404
Dependência nós já
falamos quando falamos de

160
00:12:46.404 --> 00:12:50.750
cartões CRC e iremos tratar
disso outras aulas também.

161
00:12:50.750 --> 00:12:56.225
Então na apresentação do diagrama de
classes eu não vou me ater a explicar

162
00:12:56.225 --> 00:13:01.188
mais detalhes sobre dependência agora,
mas mais para a frente e com

163
00:13:01.188 --> 00:13:06.210
certeza ao longo dos cursos que
apresentaremos a questão de dependência

164
00:13:06.210 --> 00:13:11.280
será bem tratada, porque é muito
importante que os nossos programas,

165
00:13:11.280 --> 00:13:15.585
as nossas classes tenham
acoplamento melhor.

166
00:13:15.585 --> 00:13:21.668
Ter acoplamento melhor significa ter menos
dependência de uma classe com outra.

167
00:13:21.668 --> 00:13:24.790
Estritamente aquilo que for necessário.

168
00:13:24.790 --> 00:13:28.551
Então vamos começar
a falar sobre associação.

169
00:13:28.551 --> 00:13:33.440
Então o diagrama de classes que nós
apresentamos eu recortei apenas uma parte

170
00:13:33.440 --> 00:13:40.152
com as classes Cliente, Pedido e Pagamento
e mostro dois tipos de associação.

171
00:13:40.152 --> 00:13:41.916
O quê que é uma associação?

172
00:13:41.916 --> 00:13:46.046
Uma associação é alguma colaboração,
alguma dependência,

173
00:13:46.046 --> 00:13:49.664
alguma forma de relacionar
uma classe com outra.

174
00:13:49.664 --> 00:13:54.760
Normalmente para tornar isso mais
prático e fácil de a gente fazer,

175
00:13:54.760 --> 00:13:57.110
nós colocamos rótulos nisso.

176
00:13:57.110 --> 00:14:01.590
Então por exemplo o Cliente faz Pedido.

177
00:14:01.590 --> 00:14:04.250
Olha a gente está fazendo uma frase não é?

178
00:14:04.250 --> 00:14:05.363
Está certo?

179
00:14:05.363 --> 00:14:10.562
Que isso está representado nesse diagrama,

180
00:14:10.562 --> 00:14:14.642
já no outro o pedido
refere-se a pagamento.

181
00:14:14.642 --> 00:14:18.596
Então isso aqui é uma outra,
é uma outra associação.

182
00:14:18.596 --> 00:14:20.815
Então é uma classe associada à outra.

183
00:14:20.815 --> 00:14:25.565
Normalmente a gente consegue colocar
rótulos, que geral os rótulos são

184
00:14:25.565 --> 00:14:30.650
verbos que fazem a ligação de uma
classe com outra, são proposições.

185
00:14:30.650 --> 00:14:38.776
No diagrama vocês notam que entre Cliente
e Pedido normalmente o Cliente ele faz,

186
00:14:38.776 --> 00:14:43.588
suponha que isso fosse por
exemplo pedido num restaurante,

187
00:14:43.588 --> 00:14:48.280
a pessoa está fazendo o pedido só para
ela, só ela que foi no restaurante.

188
00:14:48.280 --> 00:14:52.330
Então inicialmente não
existia pedido nenhum,

189
00:14:52.330 --> 00:14:56.775
quando o cliente faz o
pedido ele passa a ser

190
00:14:56.775 --> 00:15:01.087
pedido e estaria associado
ao objeto Cliente.

191
00:15:01.087 --> 00:15:07.377
Agora imaginem vocês que eu esteja
querendo pagar a conta dos meus colegas.

192
00:15:07.377 --> 00:15:11.890
Então eu fui com 3 colegas,
então são 4 pedidos no total.

193
00:15:11.890 --> 00:15:16.741
Então o Cliente faz,
ali está marcado 0 até asterisco,

194
00:15:16.741 --> 00:15:20.170
asterisco significa número indefinido,
né, está certo?

195
00:15:20.170 --> 00:15:24.975
Então o Cliente faz 4 pedidos,
seria nesse momento,

196
00:15:24.975 --> 00:15:29.780
ou seja, eu posso fazer de 0 ou não faço
pedido nenhum, levanto e vou embora,

197
00:15:29.780 --> 00:15:32.069
ou faço até 4 no meu exemplo.

198
00:15:32.069 --> 00:15:35.091
Isso a gente chama de multiplicidade.

199
00:15:35.091 --> 00:15:40.317
A multiplicidade se refere
ao conjunto de objetos

200
00:15:40.317 --> 00:15:45.962
que eu posso instanciar
relativo a tipo de associação.

201
00:15:45.962 --> 00:15:51.650
Então por exemplo na associação Cliente,
se estiver olhando esse lado,

202
00:15:51.650 --> 00:15:56.585
Cliente faz Pedido, o Cliente vai fazer

203
00:15:56.585 --> 00:16:01.205
0 ou mais pedidos, ou seja,
vão ser criadas 0 ou mais

204
00:16:01.205 --> 00:16:05.437
instâncias da classe Pedido,
vão ser objetos da classe Pedido.

205
00:16:05.437 --> 00:16:11.154
Acabei de falar de multiplicidade
olhando da classe Cliente para Pedido e

206
00:16:11.154 --> 00:16:16.695
eu representei eles cor-de-rosa
e verde exatamente para

207
00:16:16.695 --> 00:16:22.505
mostrar que o Cliente está
associado a 0 ou mais Pedidos.

208
00:16:22.505 --> 00:16:28.450
E o Pedido está associado
a exatamente Cliente.

209
00:16:28.450 --> 00:16:33.101
Já o outro relacionamento
de Pedido com Pagamento,

210
00:16:33.101 --> 00:16:39.063
Pagamento está azul,
o pedido se refere a 1 ou mais Pagamentos,

211
00:16:39.063 --> 00:16:43.512
ou seja, se eu tiver 1 Pedido
só eu vou fazer Pagamento.

212
00:16:43.512 --> 00:16:46.270
Não faz sentido ter 0 Pagamentos aqui,
não,

213
00:16:46.270 --> 00:16:51.803
a cada Pedido tem que ter 1 Pagamento,
por isso que fica 1 ali, de 1 ou mais.

214
00:16:51.803 --> 00:16:56.230
Agora, se eu por exemplo
parcelei esses Pagamentos,

215
00:16:56.230 --> 00:17:00.228
então eu posso ter 1, 2,
3 Pagamentos ou mais.

216
00:17:00.228 --> 00:17:04.941
É isso que está querendo dizer esse
relacionamento, essa associação,

217
00:17:04.941 --> 00:17:11.350
essa multiplicidade para essa associação
entre Pedido e Pagamento, está verde.

218
00:17:11.350 --> 00:17:17.093
O contrário: Pagamento relação
a Pedido ele tem associação,

219
00:17:17.093 --> 00:17:22.114
a cada Pagamento vai existir apenas
1 Pedido, não faz sentido ter

220
00:17:22.114 --> 00:17:27.361
0 nem ter mais do que 1,
é exatamente 1 pedido.

221
00:17:27.361 --> 00:17:32.930
Já quando a multiplicidade é 1, ou seja,

222
00:17:32.930 --> 00:17:39.730
aproveitando o exemplo de
livro e usuário de biblioteca,

223
00:17:39.730 --> 00:17:47.230
toda vez que livro é emprestado a usuário
de biblioteca ele fica sabendo,

224
00:17:47.230 --> 00:17:51.410
ele vai ser marcado na lista
de livros daquele usuário.

225
00:17:51.410 --> 00:17:58.149
Mas só vai existir usuário
associado ao livro, ou seja,

226
00:17:58.149 --> 00:18:03.525
eu posso ter livro
associado a 0 ou 1 usuário.

227
00:18:03.525 --> 00:18:09.826
Por isso que quando a gente trabalhou
com essas classes eu mostrava

228
00:18:09.826 --> 00:18:16.607
a disponibilidade do livro usando usuário
para representar a disponibilidade,

229
00:18:16.607 --> 00:18:21.317
se o usuário não tinha emprestado era
0 usuário, o livro estava disponível,

230
00:18:21.317 --> 00:18:25.959
mas na hora que eu emprestei,
eu emprestei para 1 usuário.

231
00:18:25.959 --> 00:18:29.311
Então esse 0 e 1 é opcional.

232
00:18:29.311 --> 00:18:34.306
Agora é o contrário: o usuário
ele tem relacionamento com livro,

233
00:18:34.306 --> 00:18:38.900
ao ter esse relacionamento com livro,
nesse meu exemplo obviamente,

234
00:18:38.900 --> 00:18:42.970
esse 1 a gente chama de obrigatório,

235
00:18:42.970 --> 00:18:50.150
enquanto que 0 dois pontos 1 é
opcional quando está só o 1,

236
00:18:50.150 --> 00:18:54.210
ele é obrigatório,
a associação é obrigatória.

237
00:18:54.210 --> 00:18:58.170
Essa associação é obrigatória, ou seja,

238
00:18:58.170 --> 00:19:06.820
eu estou dizendo exatamente que o usuário
está associado a 1 e somente 1 livro.

239
00:19:06.820 --> 00:19:12.582
Quando é 0 dois pontos 1, a multiplicidade
a gente chama de opcional.

240
00:19:12.582 --> 00:19:17.482
Então nesse nosso exemplo
eu já mostrei para vocês.

241
00:19:17.482 --> 00:19:22.380
Agora podemos generalizar
isso para n dois pontinhos m,

242
00:19:22.380 --> 00:19:26.351
onde o n e o m podem ser
qualquer valor finitos,

243
00:19:26.351 --> 00:19:30.620
a gente não vai trabalhar com
valores muito grandes, está certo?

244
00:19:30.620 --> 00:19:35.660
Então por exemplo Veículo
está associado com Roda e eu

245
00:19:35.660 --> 00:19:40.770
coloquei ali "Veículo tem
1 a 6 rodas" como exemplo.

246
00:19:40.770 --> 00:19:45.390
Então eu posso ter veículos,
como por exemplo o primeiro

247
00:19:45.390 --> 00:19:50.356
desenho que eu mostro aqui para vocês,
a primeira imagem, é monociclo,

248
00:19:50.356 --> 00:19:54.330
não é qualquer que vai andar nele,
mas é monociclo, só tem uma roda.

249
00:19:54.330 --> 00:19:59.470
Já o último carro ali,
bom depois nós temos bicicleta,

250
00:19:59.470 --> 00:20:04.604
skate, carro, triciclo com os

251
00:20:04.604 --> 00:20:09.965
outros números de rodas,
eventualmente não tenha com 5 rodas,

252
00:20:09.965 --> 00:20:13.855
pelo menos eu não conheço,
mas com 6 existem vários.

253
00:20:13.855 --> 00:20:18.997
Nesse exemplo que eu mostro
para vocês tem carro da Fórmula

254
00:20:18.997 --> 00:20:24.803
1 antigo que teve 6 rodas,
nós temos também

255
00:20:24.803 --> 00:20:29.892
SUVs modernas que estão
saindo com 6 rodas também.

256
00:20:29.892 --> 00:20:35.894
Então no nosso exemplo eu estou querendo
dizer que a multiplicidade é de número

257
00:20:35.894 --> 00:20:41.247
a outro, pode ser de 1 a 6 como nesse
exemplo mas pode ser por exemplo de 4 a 6.

258
00:20:41.247 --> 00:20:45.889
Se eu estiver falando só de carros,
que tenham 4 ou mais rodas,

259
00:20:45.889 --> 00:20:51.409
então poderia ser de 4 a 6,
de 4 a 8 se tiver carros com 8 rodas.

260
00:20:51.409 --> 00:20:56.620
Concluímos assim a primeira
parte dessa apresentação sobre

261
00:20:56.620 --> 00:21:03.430
diagrama de classes que falamos
sobre como representar as classes,

262
00:21:03.430 --> 00:21:08.830
como representar as associações
até o item de multiplicidade.

263
00:21:08.830 --> 00:21:13.946
Na próxima aula iremos dar continuidade
a isso, falaremos da questão

264
00:21:13.946 --> 00:21:19.465
de navegabilidade entre uma classe e
outra, associação do tipo agregação,

265
00:21:19.465 --> 00:21:25.294
associação do tipo composição e herança.

266
00:21:25.294 --> 00:21:29.150
Obrigado.
WEBVTT

1
00:00:00.000 --> 00:00:06.025
[MÚSICA] E aí,

2
00:00:06.025 --> 00:00:08.970
pessoal?

3
00:00:08.970 --> 00:00:09.623
Tudo bem?

4
00:00:09.623 --> 00:00:13.550
Nessa aula, vamos ver como
adicionar sprites simples na cena.

5
00:00:13.550 --> 00:00:18.440
Faça download do arquivo zip disponível
no material de apoio deste módulo

6
00:00:18.440 --> 00:00:23.342
e importe as imagens
ufo1.png e ufo2.png na

7
00:00:23.342 --> 00:00:27.730
pasta Assets.xcassets do
seu projeto no Xcode.

8
00:00:27.730 --> 00:00:32.390
Vamos, primeiro, fixar a orientação
do aparelho no modo paisagem.

9
00:00:32.390 --> 00:00:36.420
Clique no nome do seu projeto
e desative a opção Portrait.

10
00:00:36.420 --> 00:00:41.630
Clique no GameScene.sks

11
00:00:41.630 --> 00:00:47.190
[SEM_ÁUDIO] e mude o tamanho da

12
00:00:47.190 --> 00:00:54.050
cena para o tamanho do
iPhone 5: 1136 por 640.

13
00:00:54.050 --> 00:00:58.550
Assim, todo o conteúdo será
redimensionado na proporção do iPhone.

14
00:00:58.550 --> 00:01:04.070
Veremos como lidar com diferentes tipos de
proporção de tela nos próximos módulos.

15
00:01:04.070 --> 00:01:08.100
Podemos adicionar sprite
pelo editor de cena.

16
00:01:08.100 --> 00:01:11.700
Clique e arraste color
sprite para a sua cena.

17
00:01:11.700 --> 00:01:18.700
Modifique o nome desse sprite para Nave1.

18
00:01:18.700 --> 00:01:23.730
Na propriedade Texture,
escolha a imagem ufo1.

19
00:01:23.730 --> 00:01:27.075
Pelo editor, você pode ajustar visualmente

20
00:01:27.075 --> 00:01:33.745
a posição, [SEM_ÁUDIO]

21
00:01:33.745 --> 00:01:39.530
o tamanho,

22
00:01:39.530 --> 00:01:45.710
[SEM_ÁUDIO] o

23
00:01:45.710 --> 00:01:51.610
ponto de âncora,
que para o nó é o eixo de rotação.

24
00:01:51.610 --> 00:01:56.610
0.5 para o X e Y significa
que é o ponto central do nó.

25
00:01:56.610 --> 00:02:01.080
0 para X e Y significa o
ponto inferior esquerdo.

26
00:02:01.080 --> 00:02:07.220
[SEM_ÁUDIO] Pode mudar

27
00:02:07.220 --> 00:02:12.969
a cor do sprite através de Blend factor
e Blend Mode e tem outras opções mais

28
00:02:12.969 --> 00:02:18.490
avançadas para lidar com luzes, colisões e
físicas, que veremos nos próximos módulos.

29
00:02:18.490 --> 00:02:21.572
Vamos agora adicionar
sprite simples pelo código,

30
00:02:21.572 --> 00:02:25.860
que é muito útil quando você quer criar
objetos em tempo real durante o jogo.

31
00:02:25.860 --> 00:02:31.900
Primeiramente, vamos apagar o código
exemplo que já vem nesse template.

32
00:02:31.900 --> 00:02:36.470
Agora, vamos criar sprite,
assim que a cena aparece na tela.

33
00:02:36.470 --> 00:02:42.410
Você precisa de, no mínimo,
duas linhas de código.

34
00:02:42.410 --> 00:02:47.600
Uma para criar a variável constante
com o inicializador da classe

35
00:02:47.600 --> 00:02:52.660
SKSpriteNode e passar, como argumento,
o nome da imagem previamente importada.

36
00:02:52.660 --> 00:02:55.155
E a outra, para adicionar na cena,

37
00:02:55.155 --> 00:02:59.240
dizendo qual é o nó pai desse
sprite que acabamos de criar.

38
00:02:59.240 --> 00:03:04.267
Para isso, é usado a função
addChild do nó pai e é passado,

39
00:03:04.267 --> 00:03:07.620
como argumento,
o nó que criamos e que será o filho.

40
00:03:07.620 --> 00:03:09.400
Utilizamos self aqui,

41
00:03:09.400 --> 00:03:13.850
pois estamos incluindo esse
sprite como filho dessa cena.

42
00:03:13.850 --> 00:03:18.455
Ao rodar no simulador,
você pode perceber que, por padrão,

43
00:03:18.455 --> 00:03:23.060
como não definimos a posição desse sprite,
ele é criado no ponto de origem da cena.

44
00:03:23.060 --> 00:03:30.100
Para ajustar a posição do sprite,
basta modificar a propriedade position.

45
00:03:30.100 --> 00:03:35.480
Ela deve receber CGPoint que é
criado com valores de X e Y.

46
00:03:35.480 --> 00:03:41.130
Vamos escolher o valor 100 para
X e para Y e rodar no simulador.

47
00:03:41.130 --> 00:03:49.882
Para saber exatamente qual é a posição
central da tela do aparelho,

48
00:03:49.882 --> 00:03:56.326
você pode utilizar as seguintes funções:
CGRectGetMidX passando como argumento

49
00:03:56.326 --> 00:04:01.658
o frame da cena para pegar
o valor central no eixo x

50
00:04:01.658 --> 00:04:08.240
e CGRectGetMidY self.frame para
pegar o valor central no eixo y.

51
00:04:08.240 --> 00:04:12.981
A propriedade frame contém as informações
de coordenadas como, por exemplo,

52
00:04:12.981 --> 00:04:14.690
a altura e a largura da cena.

53
00:04:14.690 --> 00:04:16.769
Além da propriedade position,

54
00:04:16.769 --> 00:04:21.470
você pode modificar todas as outras
propriedades do sprite por código.

55
00:04:21.470 --> 00:04:25.220
Veja a referência da classe no
material de apoio para ver todas

56
00:04:25.220 --> 00:04:27.970
as propriedades que podem ser modificadas.

57
00:04:27.970 --> 00:04:31.417
Bom, e como fazemos para modificar,
por código,

58
00:04:31.417 --> 00:04:35.680
as propriedades daquele sprite
que criamos no editor de cena?

59
00:04:35.680 --> 00:04:40.490
Você pode procurar a referência
desse objeto procurando pelo nome.

60
00:04:40.490 --> 00:04:45.374
Crie uma variável da classe SKSpriteNode e

61
00:04:45.374 --> 00:04:50.860
procure o sprite pelo nome utilizando
a função childNodeWithName.

62
00:04:50.860 --> 00:04:54.740
E passe, como argumento,
o nome que escolhemos no editor de cena.

63
00:04:54.740 --> 00:04:59.290
Precisamos fazer cast também para
dizer qual é a classe do nó.

64
00:04:59.290 --> 00:05:05.000
Assim, podemos modificar os atributos
desse nó assim como no criado por código.

65
00:05:05.000 --> 00:05:10.430
Por fim,
rode no simulador para ver o resultado.

66
00:05:10.430 --> 00:05:18.670
Aqui, temos sprite criado pelo editor
de cena e outro criado por código.

67
00:05:18.670 --> 00:05:23.820
Na próxima aula,
veremos como criar labels de texto.

68
00:05:23.820 --> 00:05:24.610
Até lá.
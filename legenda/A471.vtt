WEBVTT

1
00:00:00.000 --> 00:00:09.150
[MÚSICA] [MÚSICA] Olá,

2
00:00:09.150 --> 00:00:13.790
bem vindo ao curso de
orientação a objetos com Java.

3
00:00:13.790 --> 00:00:20.054
Hoje iremos dar continuidade à Modelagem
CRC explicando pouquinho melhor o passo 6.

4
00:00:20.054 --> 00:00:24.868
No passo 6 nós revisitamos
todas as responsabilidades das

5
00:00:24.868 --> 00:00:29.842
classes identificadas, vamos apresentando
lógicas para cada uma delas e ao

6
00:00:29.842 --> 00:00:34.418
apresentar essas lógicas, eventualmente,
surge alguma necessidade de alguma

7
00:00:34.418 --> 00:00:38.832
colaboração e aí nós examinamos se essa
colaboração precisa de, pode ser feita por

8
00:00:38.832 --> 00:00:43.512
alguma das classes já existentes, se não
nós criamos uma classe nova para ela.

9
00:00:43.512 --> 00:00:48.003
E assim a gente vai desenvolvendo à medida
que novos requisitos vão aparecendo,

10
00:00:48.003 --> 00:00:50.217
aí é desse jeito que a gente vai fazer.

11
00:00:50.217 --> 00:00:54.105
Vamos exemplificar esse refinamento
através da classe Livro.

12
00:00:54.105 --> 00:00:58.369
Nós temos algumas responsabilidades na
classe Livro e examinaremos então como

13
00:00:58.369 --> 00:01:03.740
a lógica delas pode ser realizada
e isso pode resultar refinamentos.

14
00:01:03.740 --> 00:01:09.594
Por exemplo, conforme está representado aí
nas transparências através do número 1,

15
00:01:09.594 --> 00:01:11.740
vamos examinar a classe Livro.

16
00:01:11.740 --> 00:01:15.716
Nós temos por exemplo, a responsabilidade
"Sabe disponibilidade do livro".

17
00:01:15.716 --> 00:01:18.671
Isso pode ser representado
por atributo simples,

18
00:01:18.671 --> 00:01:22.360
booleano e você pode representar
por verdadeiro ou falso.

19
00:01:22.360 --> 00:01:25.475
Então se for
verdadeiro o livro está disponível,

20
00:01:25.475 --> 00:01:28.080
se for falso o livro não está disponível.

21
00:01:28.080 --> 00:01:31.120
Para isso,
como a gente pode ver aí no número 1,

22
00:01:31.120 --> 00:01:34.765
está relacionado com o "Marca
livro como emprestado".

23
00:01:34.765 --> 00:01:37.139
A lógica do marcar o
livro como emprestado,

24
00:01:37.139 --> 00:01:39.193
simplesmente vai lá nesse atributo,

25
00:01:39.193 --> 00:01:44.355
nessa variável de instância emprestado
e transforma ele falso por exemplo.

26
00:01:44.355 --> 00:01:47.712
Mas a gente pode ver
na sequência número 2,

27
00:01:47.712 --> 00:01:52.098
quando eu marco o livro como
disponível para empréstimo,

28
00:01:52.098 --> 00:01:57.251
ele simplesmente vai lá na lógica
dessa responsabilidade aí,

29
00:01:57.251 --> 00:02:01.775
na variável disponibilidade
e transforma ela verdadeiro.

30
00:02:01.775 --> 00:02:07.352
Então a "Marca disponível", "Marca o
livro como emprestado" torna ela falsa,

31
00:02:07.352 --> 00:02:11.437
o "Marca o livro como disponível"
torna ele verdadeiro.

32
00:02:11.437 --> 00:02:13.821
Isso é uma maneira de realizar.

33
00:02:13.821 --> 00:02:18.416
Você está vendo aí pelo número 3,
nós estamos relacionando o "Sabe

34
00:02:18.416 --> 00:02:23.029
disponibilidade empréstimo" com
a responsabilidade "Sabe usuário".

35
00:02:23.029 --> 00:02:25.034
Vamos examinar a "Sabe usuário".

36
00:02:25.034 --> 00:02:31.355
A "Sabe usuário", eu simplesmente posso
ter uma variável usuário do tipo Usuário,

37
00:02:31.355 --> 00:02:37.210
que no momento que usuário empresta livro,

38
00:02:37.210 --> 00:02:40.441
eu uso o "Anexa usuário" não é?

39
00:02:40.441 --> 00:02:45.287
E armazeno o objeto Usuário de quem acabou
de emprestar o livro nessa variável

40
00:02:45.287 --> 00:02:45.920
usuário.

41
00:02:45.920 --> 00:02:47.775
O consequente?

42
00:02:47.775 --> 00:02:52.890
Se eu olhar e perguntar se
essa variável é nula ou não,

43
00:02:52.890 --> 00:02:57.595
e se ela for nula, significa que o
livro está disponível ainda, se não for

44
00:02:57.595 --> 00:03:00.314
nula o livro já foi emprestado.

45
00:03:00.314 --> 00:03:01.321
Para quem?

46
00:03:01.321 --> 00:03:05.938
Para o usuário que foi
armazenado nessa variável.

47
00:03:05.938 --> 00:03:11.125
Eu poderia então,
vez de marcar que o livro está emprestado

48
00:03:11.125 --> 00:03:15.641
usando a variável disponibilidade,
eu poderia usar a usuário.

49
00:03:15.641 --> 00:03:22.155
Ao fazer isso eu posso eliminar
o "Marca livro como emprestado".

50
00:03:22.155 --> 00:03:25.180
Aí no ponto 4 eu estou
fazendo essa relação.

51
00:03:25.180 --> 00:03:30.356
Se eu fizer o armazenamento usando o
"Marca livro como emprestado" e usando

52
00:03:30.356 --> 00:03:35.349
o usuário, eu iria marcar o usuário ali,
quando o livro fosse emprestado.

53
00:03:35.349 --> 00:03:37.230
Então eu marco lá o usuário.

54
00:03:37.230 --> 00:03:41.232
Mas eu tenho a "Anexa usuário",
que já faz isso.

55
00:03:41.232 --> 00:03:43.560
Se a "Anexa usuário" já faz isso,

56
00:03:43.560 --> 00:03:47.110
para que é que eu vou usar
a "Marca livro como emprestado"?

57
00:03:47.110 --> 00:03:52.410
Eu já uso o "Anexa usuário",
ele passa a cumprir duas finalidades.

58
00:03:52.410 --> 00:03:55.900
Ele anexa o usuário e ao anexar o usuário,

59
00:03:55.900 --> 00:04:00.405
ele já está me dizendo "o
livro é indisponível".

60
00:04:00.405 --> 00:04:05.041
O usuário já está com o objeto
Usuário de quem emprestou o livro.

61
00:04:05.041 --> 00:04:09.145
Com isso a "Marca o livro emprestado"
já não faz sentido aparecer.

62
00:04:09.145 --> 00:04:14.112
Da mesma forma, "Marca livro
disponível" marca ali o usuário quando

63
00:04:14.112 --> 00:04:18.671
o livro se torna disponível,
ele tornaria o usuário que teria,

64
00:04:18.671 --> 00:04:24.230
o usuário anterior que tinha
emprestado o livro, marca como nulo,

65
00:04:24.230 --> 00:04:29.720
de forma que a disponibilidade, saber a
disponibilidade agora fica simples também.

66
00:04:29.720 --> 00:04:34.340
Basta olhar o usuário e fica sabendo
que o livro está disponível.

67
00:04:34.340 --> 00:04:38.074
É, mas eu tenho o "Desanexa usuário".

68
00:04:38.074 --> 00:04:41.930
Essa responsabilidade faz a mesma coisa.

69
00:04:41.930 --> 00:04:49.420
Então novamente, eu posso eliminar
o "Marca livro como disponível",

70
00:04:49.420 --> 00:04:54.075
porque faz mais sentido eu
manter a "Anexa usuário",

71
00:04:54.075 --> 00:04:59.176
porque desanexar o usuário
automaticamente significa

72
00:04:59.176 --> 00:05:04.724
que a variável usuário vai ficar
nula e o livro está disponível.

73
00:05:04.724 --> 00:05:11.434
Então fica assim, muito mais fácil
eliminar o "Desmarca livro disponível".

74
00:05:11.434 --> 00:05:17.787
Com isso a classe Livro fica com apenas
duas responsabilidades do tipo "faz".

75
00:05:17.787 --> 00:05:20.966
Nós eliminamos o "Marca livro emprestado "

76
00:05:20.966 --> 00:05:25.759
e o "Marca livro disponível" mas isso
tem consequências outros lugares.

77
00:05:25.759 --> 00:05:28.882
Eu estou tirando essas
responsabilidades de Livro,

78
00:05:28.882 --> 00:05:33.250
as duas eram colaborações de
responsabilidades de Biblioteca.

79
00:05:33.250 --> 00:05:35.883
Por exemplo o "Empresta
livro" de Biblioteca.

80
00:05:35.883 --> 00:05:39.345
Vamos dar uma olhada então no
"Empresta livro" de Biblioteca?

81
00:05:39.345 --> 00:05:43.253
No "Empresta livro" de Biblioteca
anteriormente pela minha lógica do

82
00:05:43.253 --> 00:05:46.741
"Empresta livro",
eu marcava o livro como emprestado.

83
00:05:46.741 --> 00:05:52.294
Cara, mas agora isso já é feito pelo,
pela responsabilidade colaboradora

84
00:05:52.294 --> 00:05:57.258
do próprio livro, que é o "Anexa
usuário" que emprestou o livro.

85
00:05:57.258 --> 00:05:59.240
Então eu já posso eliminar.

86
00:05:59.240 --> 00:06:00.332
E é o que eu faço.

87
00:06:00.332 --> 00:06:03.610
Já a outra responsabilidade
"Devolve livro",

88
00:06:03.610 --> 00:06:09.716
também fazia uso da colaboração de
"Marca livro disponível" de Livro,

89
00:06:09.716 --> 00:06:16.335
mas o "Desanexa usuário de livro
emprestado" já está cumprindo esse papel.

90
00:06:16.335 --> 00:06:22.205
Então eu também elimino do "Devolve
livro" o "Marca livro disponível".

91
00:06:22.205 --> 00:06:26.915
Com isso a responsabilidade "Empresta
livro" fica apenas com duas

92
00:06:26.915 --> 00:06:29.060
responsabilidades do tipo "faz".

93
00:06:29.060 --> 00:06:32.037
Resumindo tudo isso agora, essas mudanças,

94
00:06:32.037 --> 00:06:37.159
esses refinamentos que nós fizemos,
no cartão CRC de Biblioteca,

95
00:06:37.159 --> 00:06:42.600
fica registrado que
a responsabilidade "Empresta livro"

96
00:06:42.600 --> 00:06:48.110
agora só tem o "Anexa usuário" e o
"Desanexa usuário" como colaborações.

97
00:06:48.110 --> 00:06:52.130
O cartão CRC de Livro tem apenas duas
responsabilidades do tipo "faz":

98
00:06:52.130 --> 00:06:56.150
o "Anexa usuário do empréstimo" e
"Desanexa usuário do empréstimo".

99
00:06:56.150 --> 00:06:57.114
Só isso.

100
00:06:57.114 --> 00:07:01.841
A classe Usuário,
ela continua do jeito que estava,

101
00:07:01.841 --> 00:07:04.710
não houve mudança relação à anterior.

102
00:07:04.710 --> 00:07:09.657
O diagrama de colaboração na
essência continua o mesmo,

103
00:07:09.657 --> 00:07:13.825
mas no particular,
no detalhe houve mudança,

104
00:07:13.825 --> 00:07:18.995
porque antes havia colaboração
do "Marca livro emprestado"

105
00:07:18.995 --> 00:07:24.520
e "Marca livro disponível",
que eram responsabilidades de Livro,

106
00:07:24.520 --> 00:07:28.894
que foram eliminados por causa
da redundância ao se estudar

107
00:07:28.894 --> 00:07:33.900
maneiras de organizar melhor as lógicas
das responsabilidades de Livro.

108
00:07:33.900 --> 00:07:38.723
Então houve uma diminuição
na dependência da classe

109
00:07:38.723 --> 00:07:41.986
Biblioteca relação à classe Livro.

110
00:07:41.986 --> 00:07:44.758
Não houve mudança nenhuma relação,

111
00:07:44.758 --> 00:07:48.667
da classe Biblioteca
relação à classe Usuário.

112
00:07:48.667 --> 00:07:53.260
Todo esse processo mostrando
UML continua igual,

113
00:07:53.260 --> 00:07:56.394
que a gente só está mostrando alto nível.

114
00:07:56.394 --> 00:07:58.935
Nós mostramos que a Modelagem CRC,

115
00:07:58.935 --> 00:08:04.746
ela tem particularidades que podem
ajudar a remover redundâncias.

116
00:08:04.746 --> 00:08:10.366
Eu posso, ao analisar com mais detalhe
as questões de responsabilidade

117
00:08:10.366 --> 00:08:16.209
do tipo "sabe" com responsabilidade do
tipo "faz" e isso pode ter cosequências,

118
00:08:16.209 --> 00:08:20.856
que no nosso exemplo,
o sistema de automação da biblioteca,

119
00:08:20.856 --> 00:08:25.956
implicou na diminuição de
responsabilidade, na diminuição do grau

120
00:08:25.956 --> 00:08:32.141
de dependência de Biblioteca, da classe
Biblioteca com relação à classe Livro.

121
00:08:32.141 --> 00:08:38.544
Mas esse processo todo às vezes pode
implicar ter mais responsabilidades,

122
00:08:38.544 --> 00:08:43.536
até na criação de novas classes
caso apareçam nas lógicas

123
00:08:43.536 --> 00:08:48.851
responsabilidades novas que
impliquem classes novas também.

124
00:08:48.851 --> 00:08:53.322
Isso tudo vai depender,
esse é processo dinâmico das

125
00:08:53.322 --> 00:08:58.270
mudanças de requisitos,
de introduzir novos requisitos

126
00:08:58.270 --> 00:09:02.893
ou da maneira de trabalhar a questão
da coesão dentro das classes,

127
00:09:02.893 --> 00:09:08.445
que foi o que nós fizemos com
a classe Livro por exemplo.

128
00:09:08.445 --> 00:09:12.770
Até a próxima aula.